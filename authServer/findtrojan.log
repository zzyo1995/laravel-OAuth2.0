2015-08-12_09:22:07 start
============changetime list==========

============nouser file list==========

============php one word trojan ==========

./server.php-
./server.php:$uri = urldecode($uri);
./server.php-
./app/controllers/ResourceController.php-		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
./app/controllers/ResourceController.php:		$data = curl_exec($ch);
./app/controllers/ResourceController.php-		curl_close($ch) ;
./app/controllers/ResourceInfoController.php-		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
./app/controllers/ResourceInfoController.php:		$data = curl_exec($ch);
./app/controllers/ResourceInfoController.php-		curl_close($ch) ;
./vendor/guzzle/http/Guzzle/Http/Message/Response.php-
./vendor/guzzle/http/Guzzle/Http/Message/Response.php:    public function unserialize($serialize)
./vendor/guzzle/http/Guzzle/Http/Message/Response.php-    {
./vendor/guzzle/http/Guzzle/Http/QueryString.php-            $parts = explode('=', $kvp, 2);
./vendor/guzzle/http/Guzzle/Http/QueryString.php:            $key = rawurldecode($parts[0]);
./vendor/guzzle/http/Guzzle/Http/QueryString.php-            if ($paramIsPhpStyleArray = substr($key, -2) == '[]') {
--
./vendor/guzzle/http/Guzzle/Http/QueryString.php-            if (isset($parts[1])) {
./vendor/guzzle/http/Guzzle/Http/QueryString.php:                $value = rawurldecode(str_replace('+', '%20', $parts[1]));
./vendor/guzzle/http/Guzzle/Http/QueryString.php-                if (isset($q[$key])) {
./vendor/guzzle/http/Guzzle/Http/Curl/CurlMulti.php-        do {
./vendor/guzzle/http/Guzzle/Http/Curl/CurlMulti.php:            while (($mrc = curl_multi_exec($this->multiHandle, $active)) == CURLM_CALL_MULTI_PERFORM);
./vendor/guzzle/http/Guzzle/Http/Curl/CurlMulti.php-            $this->checkCurlResult($mrc);
./vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php-                if ($decode) {
./vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php:                    $value = urldecode($value);
./vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php-                }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        list($this->credentials, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-    }
--
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        $uToken = unserialize(serialize($token));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
--
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-        $parentToken = new ConcreteToken($user, array(new SwitchUserRole('ROLE_PREVIOUS', $token)));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        $uToken = unserialize(serialize($parentToken));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:        list($this->credentials, $this->providerKey, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php:        list($this->key, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php:        list($this->key, $this->providerKey, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php:        list($this->credentials, $this->providerKey, $parentStr) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:        list($this->user, $this->authenticated, $this->roles, $this->attributes) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-    {
--
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-            $this->line
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php:        ) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php:        list($this->username, $parentData) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php:        parent::unserialize($parentData);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php:        list($this->user, $parentData) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php:        parent::unserialize($parentData);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Util/SecureRandom.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Util/SecureRandom.php:        return json_decode(file_get_contents($this->seedFile));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Util/SecureRandom.php-    }
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        parent::setUp();
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->filesystem = new Filesystem();
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('TARGET FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals(file_get_contents($sourceFilePath), file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($filename);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertSame('bar', file_get_contents($filename));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($filename);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertSame('bar', file_get_contents($filename));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($filename);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertSame('bar', file_get_contents($filename));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Cookie.php-        if ($encodedValue) {
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Cookie.php:            $this->value    = urldecode($value);
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Cookie.php-            $this->rawValue = $value;
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Client.php-
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Client.php:        return unserialize($process->getOutput());
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Client.php-    }
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher3.php-        $allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher3.php:        $pathinfo = rawurldecode($pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher3.php-        $context = $this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php-        $allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php:        $pathinfo = rawurldecode($pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php-        $context = $this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php-        $allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php:        $pathinfo = rawurldecode($pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php-        $context = $this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteTest.php-        $serialized = serialize($route);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteTest.php:        $unserialized = unserialize($serialized);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteTest.php-
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/UrlMatcher.php-
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/UrlMatcher.php:        if ($ret = $this->matchCollection(rawurldecode($pathinfo), $this->routes)) {
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/UrlMatcher.php-            return $ret;
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php-        \$allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php:        \$pathinfo = rawurldecode(\$pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php-        \$context = \$this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Route.php-
./vendor/symfony/routing/Symfony/Component/Routing/Route.php:    public function unserialize($data)
./vendor/symfony/routing/Symfony/Component/Routing/Route.php-    {
./vendor/symfony/routing/Symfony/Component/Routing/Route.php:        $data = unserialize($data);
./vendor/symfony/routing/Symfony/Component/Routing/Route.php-        $this->path = $data['path'];
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $globals = array(
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            'path'         => '',
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getPath()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['path'] = $annot->getPath();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            } elseif (null !== $annot->getPattern()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['path'] = $annot->getPattern();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getRequirements()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['requirements'] = $annot->getRequirements();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getOptions()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['options'] = $annot->getOptions();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getDefaults()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['defaults'] = $annot->getDefaults();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getSchemes()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['schemes'] = $annot->getSchemes();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getMethods()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['methods'] = $annot->getMethods();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getHost()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['host'] = $annot->getHost();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getCondition()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['condition'] = $annot->getCondition();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-                if ($annot instanceof $this->routeAnnotationClass) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                    $this->addRoute($collection, $annot, $globals, $class, $method);
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-                }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:    protected function addRoute(RouteCollection $collection, $annot, $globals, \ReflectionClass $class, \ReflectionMethod $method)
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-    {
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $defaults = array_replace($globals['defaults'], $annot->getDefaults());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        foreach ($method->getParameters() as $param) {
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        }
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $requirements = array_replace($globals['requirements'], $annot->getRequirements());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $options = array_replace($globals['options'], $annot->getOptions());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $schemes = array_replace($globals['schemes'], $annot->getSchemes());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $methods = array_replace($globals['methods'], $annot->getMethods());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        if (null === $host) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:            $host = $globals['host'];
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        if (null === $condition) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:            $condition = $globals['condition'];
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        }
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $route = new Route($globals['path'].$annot->getPath(), $defaults, $requirements, $options, $host, $schemes, $methods, $condition);
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/YamlFileLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/YamlFileLoader.php:        $config = $this->yamlParser->parse(file_get_contents($path));
./vendor/symfony/routing/Symfony/Component/Routing/Loader/YamlFileLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationFileLoader.php-        $namespace = false;
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationFileLoader.php:        $tokens = token_get_all(file_get_contents($file));
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationFileLoader.php-        for ($i = 0, $count = count($tokens); $i < $count; $i++) {
./vendor/symfony/console/Symfony/Component/Console/Tests/Descriptor/AbstractDescriptorTest.php-        foreach ($objects as $name => $object) {
./vendor/symfony/console/Symfony/Component/Console/Tests/Descriptor/AbstractDescriptorTest.php:            $description = file_get_contents(sprintf('%s/../Fixtures/%s.%s', __DIR__, $name, $this->getFormat()));
./vendor/symfony/console/Symfony/Component/Console/Tests/Descriptor/AbstractDescriptorTest.php-            $data[] = array($object, $description);
./vendor/symfony/console/Symfony/Component/Console/Tests/Helper/DialogHelperTest.php-    {
./vendor/symfony/console/Symfony/Component/Console/Tests/Helper/DialogHelperTest.php:        exec('stty 2>&1', $output, $exitcode);
./vendor/symfony/console/Symfony/Component/Console/Tests/Helper/DialogHelperTest.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $sttyMode = shell_exec('stty -g');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            // Disable icanon (so we can fread each keypress) and echo (we'll do echoing here instead)
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec('stty -icanon -echo');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            // Reset stty so it behaves normally again
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec(sprintf('stty %s', $sttyMode));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-        }
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $output->write($question);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $value = rtrim(shell_exec($exe));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $output->writeln('');
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $sttyMode = shell_exec('stty -g');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec('stty -echo');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $value = fgets($this->inputStream ?: STDIN, 4096);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec(sprintf('stty %s', $sttyMode));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $command = sprintf("/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \$mypassword'", $shell, $readCmd);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $value = rtrim(shell_exec($command));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $output->writeln('');
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            foreach (array('bash', 'zsh', 'ksh', 'csh') as $sh) {
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:                if ('OK' === rtrim(shell_exec(sprintf($test, $sh)))) {
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-                    self::$shell = $sh;
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:        exec('stty 2>&1', $output, $exitcode);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/process/Symfony/Component/Process/Process.php-            if (defined('PHP_WINDOWS_VERSION_BUILD') && !$this->isSigchildEnabled()) {
./vendor/symfony/process/Symfony/Component/Process/Process.php:                exec(sprintf("taskkill /F /T /PID %d 2>&1", $this->getPid()), $output, $exitCode);
./vendor/symfony/process/Symfony/Component/Process/Process.php-                if ($exitCode > 0) {
./vendor/symfony/process/Symfony/Component/Process/Tests/AbstractProcessTest.php-        $variations = array(
./vendor/symfony/process/Symfony/Component/Process/Tests/AbstractProcessTest.php:            'fwrite(STDOUT, $in = file_get_contents(\'php://stdin\')); fwrite(STDERR, $in);',
./vendor/symfony/process/Symfony/Component/Process/Tests/AbstractProcessTest.php-            'include \''.__DIR__.'/PipeStdinInStdoutStdErrStreamSelect.php\';',
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php-            'method' => $request->getMethod(),
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php:            'path' => rawurldecode($request->getPathInfo()),
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php-            'host' => $request->getHost(),
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php-        $filePath = $this->getFilePath();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php:        $this->data = is_readable($filePath) && is_file($filePath) ? unserialize(file_get_contents($filePath)) : array();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php-            if ($sessionRows) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php:                return base64_decode($sessionRows[0][0]);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php-            }
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * Request body parameters ($_POST)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * Query string parameters ($_GET)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * Uploaded files ($_FILES)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $request = self::createRequestFromFactory($_GET, $_POST, array(), $_COOKIE, $_FILES, $_SERVER);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     * @param array  $cookies    The request cookies ($_COOKIE)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * @param array  $files      The request files ($_FILES)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     * @param array  $server     The server parameters ($_SERVER)
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * $_FILES is never override, see rfc1867
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $_GET = $this->query->all();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $_POST = $this->request->all();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        $_SERVER = $this->server->all();
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $request = array('g' => $_GET, 'p' => $_POST, 'c' => $_COOKIE);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $_REQUEST = array();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        foreach (str_split($requestOrder) as $order) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:            $_REQUEST = array_merge($_REQUEST, $request[$order]);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-            $parts[] = isset($keyValuePair[1]) ?
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:                rawurlencode(urldecode($keyValuePair[0])).'='.rawurlencode(urldecode($keyValuePair[1])) :
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:                rawurlencode(urldecode($keyValuePair[0]));
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:            $order[] = urldecode($keyValuePair[0]);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        if (null === $this->content) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:            $this->content = file_get_contents('php://input');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        $basename = basename($baseUrl);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        if (empty($basename) || !strpos(rawurldecode($truncatedRequestUri), $basename)) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-            // no match whatsoever; set it blank
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        if (0 !== strpos(rawurldecode($string), $prefix)) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-            return false;
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-        $sql = 'CREATE TABLE sessions (sess_id VARCHAR(128) PRIMARY KEY, sess_data TEXT, sess_time INTEGER)';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php:        $this->pdo->exec($sql);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-    }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_SILENT);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php:        $pdo->exec('CREATE TABLE sessions (sess_id VARCHAR(128) PRIMARY KEY, sess_data TEXT, sess_time INTEGER)');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_GET['foo1']    = 'bar1';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_POST['foo2']   = 'bar2';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $_COOKIE['foo3'] = 'bar3';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_FILES['foo4']  = array('bar4');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $_SERVER['foo5'] = 'bar5';
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $request = Request::createFromGlobals();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals('bar1', $request->query->get('foo1'), '::fromGlobals() uses values from $_GET');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals('bar2', $request->request->get('foo2'), '::fromGlobals() uses values from $_POST');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $this->assertEquals('bar3', $request->cookies->get('foo3'), '::fromGlobals() uses values from $_COOKIE');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals(array('bar4'), $request->files->get('foo4'), '::fromGlobals() uses values from $_FILES');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $this->assertEquals('bar5', $request->server->get('foo5'), '::fromGlobals() uses values from $_SERVER');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        unset($_GET['foo1'], $_POST['foo2'], $_COOKIE['foo3'], $_FILES['foo4'], $_SERVER['foo5']);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        Request::enableHttpMethodParameterOverride();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_POST['_method']   = $method;
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_POST['foo6']      = 'bar6';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $_SERVER['REQUEST_METHOD'] = 'PoSt';
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        unset($_POST['_method'], $_POST['foo6'], $_SERVER['REQUEST_METHOD']);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $this->disableHttpMethodParameterOverride();
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals(array('foo' => 'bar'), $_GET);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals(array('foo' => 'bar'), $_POST);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ServerBag.php-                    // Decode AUTHORIZATION header into PHP_AUTH_USER and PHP_AUTH_PW when authorization header is basic
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ServerBag.php:                    $exploded = explode(':', base64_decode(substr($authorizationHeader, 6)));
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ServerBag.php-                    if (count($exploded) == 2) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php:     * Fixes a malformed PHP $_FILES array.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php:     * PHP has a bug that the format of the $_FILES array differs, depending on
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     * whether the uploaded file fields had normal field names or array-like
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php:     * This method fixes the array to look like the "normal" $_FILES array.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/RequestMatcher.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/RequestMatcher.php:        if (null !== $this->path && !preg_match('{'.$this->path.'}', rawurldecode($request->getPathInfo()))) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/RequestMatcher.php-            return false;
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/UploadedFile.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/UploadedFile.php:     * Accepts the information of the uploaded file as provided by the PHP global $_FILES.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/UploadedFile.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/MimeType/FileBinaryMimeTypeGuesser.php-        // need to use --mime instead of -i. see #6641
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/MimeType/FileBinaryMimeTypeGuesser.php:        passthru(sprintf($this->cmd, escapeshellarg($path)), $return);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/MimeType/FileBinaryMimeTypeGuesser.php-        if ($return > 0) {
./vendor/symfony/debug/Symfony/Component/Debug/Tests/ErrorHandlerTest.php-        try {
./vendor/symfony/debug/Symfony/Component/Debug/Tests/ErrorHandlerTest.php:            eval(<<<'PHP'
./vendor/symfony/debug/Symfony/Component/Debug/Tests/ErrorHandlerTest.php-class _BaseCompileTimeError { function foo() {} }
./vendor/symfony/debug/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php-                    'args' => array(
./vendor/symfony/debug/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php:                        unserialize('O:14:"BogusTestClass":0:{}')
./vendor/symfony/debug/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php-                    ),
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IcuResFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IcuResFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resourcebundle/res/en.res'), file_get_contents($tempDir.'/messages/en.res'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IcuResFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources-clean.xlf'), file_get_contents($tempDir.'/messages.en.xlf'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/MoFileDumperTest.php-        $dumper->dump($catalogue, array('path' => $tempDir));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/MoFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.mo'), file_get_contents($tempDir.'/messages.en.mo'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/MoFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PoFileDumperTest.php-        $dumper->dump($catalogue, array('path' => $tempDir));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PoFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.po'), file_get_contents($tempDir.'/messages.en.po'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PoFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/JsonFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/JsonFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.json'), file_get_contents($tempDir.'/messages.en.json'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/JsonFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/CsvFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/CsvFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/valid.csv'), file_get_contents($tempDir.'/messages.en.csv'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/CsvFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/YamlFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/YamlFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.yml'), file_get_contents($tempDir.'/messages.en.yml'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/YamlFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PhpFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PhpFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.php'), file_get_contents($tempDir.'/messages.en.php'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PhpFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/QtFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/QtFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.ts'), file_get_contents($tempDir.'/resources.en.ts'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/QtFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IniFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IniFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.ini'), file_get_contents($tempDir.'/messages.en.ini'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IniFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/JsonFileLoader.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/JsonFileLoader.php:        $messages = json_decode(file_get_contents($resource), true);
./vendor/symfony/translation/Symfony/Component/Translation/Loader/JsonFileLoader.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/XliffFileLoader.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/XliffFileLoader.php:        $source = file_get_contents(__DIR__.'/schema/dic/xliff-core/xliff-core-1.2-strict.xsd');
./vendor/symfony/translation/Symfony/Component/Translation/Loader/XliffFileLoader.php-        $source = str_replace('http://www.w3.org/2001/xml.xsd', $location, $source);
./vendor/symfony/translation/Symfony/Component/Translation/Loader/YamlFileLoader.php-        try {
./vendor/symfony/translation/Symfony/Component/Translation/Loader/YamlFileLoader.php:            $messages = $this->yamlParser->parse(file_get_contents($resource));
./vendor/symfony/translation/Symfony/Component/Translation/Loader/YamlFileLoader.php-        } catch (ParseException $e) {
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-        $crawler = new Crawler();
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php:        $crawler->addHtmlContent(file_get_contents(__DIR__.'/Fixtures/windows-1250.html'), 'Windows-1250');
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-
--
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-        //gbk encode of <html><p>中文</p></html>
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php:        $crawler->addHtmlContent(base64_decode('PGh0bWw+PHA+1tDOxDwvcD48L2h0bWw+'), 'gbk');
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php-                case SortableIterator::SORT_BY_ACCESSED_TIME :
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php:                    file_get_contents(self::toAbsolute('.git'));
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php-                    sleep(1);
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php:                    file_get_contents(self::toAbsolute('.bar'));
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php-                    break;
./vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php-        $level = error_reporting(0);
./vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php:        $content = file_get_contents($this->getPathname());
./vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php-        error_reporting($level);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php-        // todo: find a better way (command could not be available)
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php:        exec('command -v '.$command, $output, $code);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php-
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-    {
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php:        return escapeshellcmd($input);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-    }
--
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-        if (null === $this->errorHandler) {
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php:            exec($this->join(), $output);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-        } else {
./vendor/symfony/css-selector/Symfony/Component/CssSelector/Tests/XPath/TranslatorTest.php-        $translator = new Translator();
./vendor/symfony/css-selector/Symfony/Component/CssSelector/Tests/XPath/TranslatorTest.php:        $document = new \SimpleXMLElement(file_get_contents(__DIR__.'/Fixtures/lang.xml'));
./vendor/symfony/css-selector/Symfony/Component/CssSelector/Tests/XPath/TranslatorTest.php-        $elements = $document->xpath($translator->cssToXPath($css));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-            } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php:                eval('; ?>'.$response->getContent().'<?php ;');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-            }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-        } elseif ($response->headers->has('X-Body-File')) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php:            $response->setContent(file_get_contents($response->headers->get('X-Body-File')));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-        } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php:        return unserialize($entries);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-    }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php:        return is_file($path) ? file_get_contents($path) : false;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-    }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php:        if ($data != file_get_contents($tmpFile)) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-            return false;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php:    public function unserialize($data)
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php-    {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php:        $this->data = unserialize($data);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php-    }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTestCase.php-        foreach (new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator(sys_get_temp_dir().'/http_cache/md', \RecursiveDirectoryIterator::SKIP_DOTS), \RecursiveIteratorIterator::LEAVES_ONLY) as $file) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTestCase.php:            $values[] = file_get_contents($file);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTestCase.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $this->assertCount(1, $values);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php:        $tmp = unserialize($values[0]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $tmp[0][1]['date'] = \DateTime::createFromFormat('U', time() - 5)->format(DATE_RFC2822);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $this->assertCount(1, $values);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php:        $tmp = unserialize($values[0]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $tmp[0][1]['date'] = \DateTime::createFromFormat('U', time() - 5)->format(DATE_RFC2822);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $this->assertCount(1, $values);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php:        $tmp = unserialize($values[0]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $time = \DateTime::createFromFormat('U', time());
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcachedMock.php-        if (isset($this->storage[$key])) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcachedMock.php:            return unserialize($this->storage[$key]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcachedMock.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/RedisMock.php-        if (isset($this->storage[$key])) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/RedisMock.php:            return unserialize($this->storage[$key]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/RedisMock.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcacheMock.php-        if (isset($this->storage[$key])) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcacheMock.php:            return unserialize($this->storage[$key]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcacheMock.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php:\$kernel = unserialize('$kernel');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php:\$request = unserialize('$request');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php-EOF;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/EventListener/FragmentListener.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/EventListener/FragmentListener.php:        if ($this->fragmentPath !== rawurldecode($request->getPathInfo())) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/EventListener/FragmentListener.php-            return;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/Profiler.php-    {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/Profiler.php:        $profile = unserialize(base64_decode($data));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/Profiler.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php:        return $this->createProfileFromData($token, unserialize(file_get_contents($file)));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-    }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php:            $profile->addChild($this->createProfileFromData($token, unserialize(file_get_contents($file)), $profile));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php-            $db = new \PDO($this->dsn, $this->username, $this->password);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php:            $db->exec('CREATE TABLE IF NOT EXISTS sf_profiler_data (token VARCHAR(255) PRIMARY KEY, data LONGTEXT, ip VARCHAR(64), method VARCHAR(6), url VARCHAR(255), time INTEGER UNSIGNED, parent VARCHAR(255), created_at INTEGER UNSIGNED, KEY (created_at), KEY (ip), KEY (method), KEY (url), KEY (parent))');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('PRAGMA temp_store=MEMORY; PRAGMA journal_mode=MEMORY;');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE TABLE IF NOT EXISTS sf_profiler_data (token STRING, data STRING, ip STRING, method STRING, url STRING, time INTEGER, parent STRING, created_at INTEGER)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_created_at ON sf_profiler_data (created_at)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_ip ON sf_profiler_data (ip)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_method ON sf_profiler_data (method)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_url ON sf_profiler_data (url)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_parent ON sf_profiler_data (parent)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE UNIQUE INDEX IF NOT EXISTS data_token ON sf_profiler_data (token)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:    protected function exec($db, $query, array $args = array())
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-    {
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-        } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            parent::exec($db, $query, $args);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php-        $profile->setTime($data['time']);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php:        $profile->setCollectors(unserialize(base64_decode($data['data'])));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-            if ($this->has($profile->getToken())) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:                $this->exec($db, 'UPDATE sf_profiler_data SET parent = :parent, data = :data, ip = :ip, method = :method, url = :url, time = :time, created_at = :created_at WHERE token = :token', $args);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-            } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:                $this->exec($db, 'INSERT INTO sf_profiler_data (token, parent, data, ip, method, url, time, created_at) VALUES (:token, :parent, :data, :ip, :method, :url, :time, :created_at)', $args);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-            }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $db = $this->initDb();
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:        $this->exec($db, 'DELETE FROM sf_profiler_data');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $this->close($db);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $db = $this->initDb();
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:        $this->exec($db, 'DELETE FROM sf_profiler_data WHERE created_at < :time', array(':time' => time() - $this->lifetime));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $this->close($db);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:    protected function exec($db, $query, array $args = array())
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-    {
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $profile->setTime($data['time']);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:        $profile->setCollectors(unserialize(base64_decode($data['data'])));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php:    public function unserialize($data)
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php-    {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php:        list($environment, $debug) = unserialize($data);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php-
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php:        $this->assertEquals($frame->getFileContents(), file_get_contents($data['file']));
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-    }
--
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-        $serializedFrame = serialize($frame);
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php:        $newFrame        = unserialize($serializedFrame);
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-
./vendor/filp/whoops/tests/Whoops/Exception/FrameCollectionTest.php-        $serializedFrames = serialize($frames);
./vendor/filp/whoops/tests/Whoops/Exception/FrameCollectionTest.php:        $newFrames        = unserialize($serializedFrames);
./vendor/filp/whoops/tests/Whoops/Exception/FrameCollectionTest.php-
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php:          <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-          <div class="details">
--
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-          var $this  = $(this);
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php:          var id     = /frame\-line\-([\d]*)/.exec($this.attr('id'))[1];
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-          var $codeFrame = $('#frame-code-' + id);
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-            'handlers'     => $this->getRun()->getHandlers(),
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:            'pageStyle'    => file_get_contents($cssFile),
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-
--
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-                'Server/Request Data'   => $_SERVER,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:                'GET Data'              => $_GET,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:                'POST Data'             => $_POST,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:                'Files'                 => $_FILES,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-                'Cookies'               => $_COOKIE,
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-    {
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php:        assert('is_array($data) || $node instanceof Traversable');
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-
--
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-    {
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php:        assert('is_array($data) || $node instanceof Traversable');
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:        // Check if this frame occurred within an eval().
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-        // @todo: This can be made more reliable by checking if we've entered
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:        // eval() in a previous trace, but will need some more work on the upper
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-        // trace collector(s).
--
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:            $this->fileContentsCache = file_get_contents($filePath);
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-        }
--
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-     */
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:    public function unserialize($serializedFrame)
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-    {
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:        $frame = unserialize($serializedFrame);
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php-     */
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php:    public function unserialize($serializedFrames)
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php-    {
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php:        $this->frames = unserialize($serializedFrames);
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php-    }
./vendor/server.php-
./vendor/server.php:$uri = urldecode($uri);
./vendor/server.php-
./vendor/knplabs/packagist-api/spec/Packagist/Api/Fixture/FixtureLoader.php-    {
./vendor/knplabs/packagist-api/spec/Packagist/Api/Fixture/FixtureLoader.php:        return file_get_contents(__DIR__.'/'.$name);
./vendor/knplabs/packagist-api/spec/Packagist/Api/Fixture/FixtureLoader.php-    }
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-              && !static::loadMap('from.', $c,  $d) ) $d = false;
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php:            else if ('B' === strtoupper($str[$i+1])) $d = base64_decode($str[$i+2]);
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php:            else $d = rawurldecode(strtr(str_replace('%', '%25', $str[$i+2]), '=_', '% '));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-
--
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-        $file = __DIR__ . '/charset/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-        else return false;
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-        {
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php:            $s = base64_decode($s);
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-            $from_encoding = $to_encoding;
--
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-        $file = __DIR__ . '/unidata/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-        else return false;
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Normalizer.php-        $file = __DIR__ . '/unidata/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Normalizer.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Normalizer.php-        else return false;
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php:        if (! preg_match('//u', urldecode($uri)))
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-        {
--
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-                '/(?:%[89A-F][0-9A-F])+/i',
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php:                function($m) {return urlencode(u::utf8_encode(urldecode($m[0])));},
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-                $uri
--
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php:        $a = array(&$_FILES, &$_ENV, &$_GET, &$_POST, &$_COOKIE, &$_SERVER, &$_REQUEST);
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-
./vendor/patchwork/utf8/class/Patchwork/Utf8.php-        $file = __DIR__ . '/Utf8/data/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/Utf8.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/Utf8.php-        else return false;
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $serializedClosure = serialize($this->serializableClosure);
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $unserializedClosure = unserialize($serializedClosure);
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $finalReturnValue = call_user_func($unserializedClosure, 4);
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $serializedOnce = unserialize(serialize($this->serializableClosure));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $this->assertEquals(32, call_user_func($serializedOnce, 5));
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $serializedAgain = unserialize(serialize($this->serializableClosure));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $this->assertEquals(32, call_user_func($serializedAgain, 5));
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $serializedTwice = unserialize(serialize($serializedOnce));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $this->assertEquals(32, call_user_func($serializedTwice, 5));
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $newInc = unserialize(serialize($inc));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        /** @var $newInc \Closure */
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-     */
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php:    public function unserialize($__serialized__)
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-    {
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-        // Unserialize the data we need to reconstruct the SuperClosure
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php:        $this->state = unserialize($__serialized__);
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-        list($__code__, $__context__) = $this->state;
--
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-        // Evaluate the code to recreate the Closure
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php:        eval("\$this->closure = {$__code__};");
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-    }
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/ClosureParser.php-            $parser = new \PHPParser_Parser(new \PHPParser_Lexer_Emulative);
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/ClosureParser.php:            self::$cache[$filename] = $parser->parse(file_get_contents($filename));
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/ClosureParser.php-        }
./vendor/jeremeamia/SuperClosure/demo/factorial.php-$serialized = serialize($factorial);
./vendor/jeremeamia/SuperClosure/demo/factorial.php:$unserialized = unserialize($serialized);
./vendor/jeremeamia/SuperClosure/demo/factorial.php-
./vendor/jeremeamia/SuperClosure/demo/hello-world.php-$serialized = serialize($helloWorld);
./vendor/jeremeamia/SuperClosure/demo/hello-world.php:$unserialized = unserialize($serialized);
./vendor/jeremeamia/SuperClosure/demo/hello-world.php-
./vendor/laravel/framework/src/Illuminate/Http/Request.php-	{
./vendor/laravel/framework/src/Illuminate/Http/Request.php:		return rawurldecode($this->path());
./vendor/laravel/framework/src/Illuminate/Http/Request.php-	}
--
./vendor/laravel/framework/src/Illuminate/Http/Request.php-		{
./vendor/laravel/framework/src/Illuminate/Http/Request.php:			if (str_is($pattern, urldecode($this->path())))
./vendor/laravel/framework/src/Illuminate/Http/Request.php-			{
./vendor/laravel/framework/src/Illuminate/Remote/SecLibGateway.php-	{
./vendor/laravel/framework/src/Illuminate/Remote/SecLibGateway.php:		$this->getConnection()->exec($command, false);
./vendor/laravel/framework/src/Illuminate/Remote/SecLibGateway.php-	}
./vendor/laravel/framework/src/Illuminate/Support/SerializableClosure.php-		{
./vendor/laravel/framework/src/Illuminate/Support/SerializableClosure.php:			list($this->code, $this->variables) = unserialize($this->serialize());
./vendor/laravel/framework/src/Illuminate/Support/SerializableClosure.php-		}
./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php-	{
./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:		if ($this->isFile($path)) return file_get_contents($path);
./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php-
./vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php-	 */
./vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php-	{
./vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php-	 */
./vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php-	{
./vendor/laravel/framework/src/Illuminate/Database/Connection.php-
./vendor/laravel/framework/src/Illuminate/Database/Connection.php:			return (bool) $me->getPdo()->exec($query);
./vendor/laravel/framework/src/Illuminate/Database/Connection.php-		});
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php:		$this->pdo->exec('BEGIN TRAN');
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
--
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php:			$this->pdo->exec('COMMIT TRAN');
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-		}
--
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-		{
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php:			$this->pdo->exec('ROLLBACK TRAN');
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
./vendor/laravel/framework/src/Illuminate/Session/Store.php-
./vendor/laravel/framework/src/Illuminate/Session/Store.php:		return $data ? unserialize($data) : array();
./vendor/laravel/framework/src/Illuminate/Session/Store.php-	}
./vendor/laravel/framework/src/Illuminate/Config/FileLoader.php-	 */
./vendor/laravel/framework/src/Illuminate/Config/FileLoader.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Config/FileLoader.php-	{
./vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php-
./vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php:		return preg_match($route->getCompiled()->getRegex(), rawurldecode($path));
./vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php-	}
./vendor/laravel/framework/src/Illuminate/Routing/Route.php-			{
./vendor/laravel/framework/src/Illuminate/Routing/Route.php:				return is_string($value) ? urldecode($value) : $value;
./vendor/laravel/framework/src/Illuminate/Routing/Route.php-
./vendor/laravel/framework/src/Illuminate/Mail/Mailer.php-		{
./vendor/laravel/framework/src/Illuminate/Mail/Mailer.php:			return with(unserialize($data['callback']))->getClosure();
./vendor/laravel/framework/src/Illuminate/Mail/Mailer.php-		}
./vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php-	 */
./vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php-	{
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ChangesCommand.php-	{
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ChangesCommand.php:		return json_decode(file_get_contents(__DIR__.'/../changes.json'), true);
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ChangesCommand.php-	}
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php-
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php:		passthru('"'.PHP_BINARY.'"'." -S {$host}:{$port} -t \"{$public}\" server.php");
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php-	}
./vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php-
./vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php:				eval($input);
./vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php-			}
./vendor/laravel/framework/src/Illuminate/Workbench/Console/WorkbenchMakeCommand.php-
./vendor/laravel/framework/src/Illuminate/Workbench/Console/WorkbenchMakeCommand.php:		passthru('composer install --dev');
./vendor/laravel/framework/src/Illuminate/Workbench/Console/WorkbenchMakeCommand.php-	}
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php:		return unserialize(substr($contents, 10));
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-	}
--
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-	 */
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-	{
./vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php-		{
./vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php:			return is_numeric($value) ? $value : unserialize($value);
./vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php-		}
./vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php-	{
./vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php:		$closure = unserialize($data['closure']);
./vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php-
./vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php-	 */
./vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php-	{
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-		// and decrypt the data, passing back the unserialized from of the value.
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		$value = base64_decode($payload['value']);
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		$iv = base64_decode($payload['iv']);
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		return unserialize($this->stripPadding($this->mcryptDecrypt($value, $iv)));
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-	}
--
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-	{
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		$payload = json_decode(base64_decode($payload), true);
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php:          <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-          <div class="details">
--
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-          var $this  = $(this);
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php:          var id     = /frame\-line\-([\d]*)/.exec($this.attr('id'))[1];
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-          var $codeFrame = $('#frame-code-' + id);
./vendor/laravel/framework/src/Illuminate/Exception/PlainDisplayer.php-
./vendor/laravel/framework/src/Illuminate/Exception/PlainDisplayer.php:		return new Response(file_get_contents(__DIR__.'/resources/plain.html'), $status, $headers);
./vendor/laravel/framework/src/Illuminate/Exception/PlainDisplayer.php-	}
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php:    public function pExpr_Eval(PHPParser_Node_Expr_Eval $node) {
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php:        return 'eval(' . $this->p($node->expr) . ')';
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-    }
--
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php:    public function pExpr_ShellExec(PHPParser_Node_Expr_ShellExec $node) {
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-        return '`' . $this->pEncapsList($node->parts, '`') . '`';
./vendor/nikic/php-parser/lib/PHPParser/Unserializer.php-     */
./vendor/nikic/php-parser/lib/PHPParser/Unserializer.php:    public function unserialize($string);
./vendor/nikic/php-parser/lib/PHPParser/Unserializer.php-}
./vendor/nikic/php-parser/lib/PHPParser/TemplateLoader.php-
./vendor/nikic/php-parser/lib/PHPParser/TemplateLoader.php:        return new PHPParser_Template($this->parser, file_get_contents($file));
./vendor/nikic/php-parser/lib/PHPParser/TemplateLoader.php-    }
./vendor/nikic/php-parser/lib/PHPParser/Node/Expr/Eval.php-    /**
./vendor/nikic/php-parser/lib/PHPParser/Node/Expr/Eval.php:     * Constructs an eval() node.
./vendor/nikic/php-parser/lib/PHPParser/Node/Expr/Eval.php-     *
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    protected function yyn240($attributes) {
./vendor/nikic/php-parser/lib/PHPParser/Parser.php:         $this->yyval = new PHPParser_Node_Expr_Eval($this->yyastk[$this->stackPos-(2-2)], $attributes); 
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    }
--
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    protected function yyn255($attributes) {
./vendor/nikic/php-parser/lib/PHPParser/Parser.php:         $this->yyval = new PHPParser_Node_Expr_ShellExec($this->yyastk[$this->stackPos-(3-2)], $attributes); 
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    }
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php:    public function unserialize($string) {
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-        $this->reader->XML($string);
--
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-        // create the node without calling it's constructor
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php:        $node = unserialize(
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-            sprintf(
./vendor/nikic/php-parser/test/PHPParser/Tests/Builder/InterfaceTest.php-
./vendor/nikic/php-parser/test/PHPParser/Tests/Builder/InterfaceTest.php:        eval($this->dump($contract));
./vendor/nikic/php-parser/test/PHPParser/Tests/Builder/InterfaceTest.php-
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-            // read file
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php:            $fileContents = file_get_contents($file);
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-
--
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-    protected function evalCallback($matches) {
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php:        return eval('return ' . $matches[1] . ';');
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-    }
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-            )),
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:            $unserializer->unserialize($xml)
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        );
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-            new PHPParser_Node_Scalar_ClassConst,
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:            $unserializer->unserialize($xml)
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        );
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        $unserializer  = new PHPParser_Unserializer_XML;
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:        $this->assertEquals($result, $unserializer->unserialize($xml));
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-    }
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        $unserializer = new PHPParser_Unserializer_XML;
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:        $unserializer->unserialize($xml);
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-    }
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        $unserializer = new PHPParser_Unserializer_XML;
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:        $unserializer->unserialize($xml);
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-    }
./vendor/nikic/php-parser/grammar/rebuildParser.php-
./vendor/nikic/php-parser/grammar/rebuildParser.php:$grammarCode = file_get_contents($grammarFile);
./vendor/nikic/php-parser/grammar/rebuildParser.php-
--
./vendor/nikic/php-parser/grammar/rebuildParser.php-echo "Building parser.\n";
./vendor/nikic/php-parser/grammar/rebuildParser.php:$output = trim(shell_exec("$kmyacc -l -m $skeletonFile -p PHPParser_Parser $tmpGrammarFile 2>&1"));
./vendor/nikic/php-parser/grammar/rebuildParser.php-echo "Output: \"$output\"\n";
--
./vendor/nikic/php-parser/grammar/rebuildParser.php-    echo "Building debug parser.\n";
./vendor/nikic/php-parser/grammar/rebuildParser.php:    $output = trim(shell_exec("$kmyacc -t -v -l -m $skeletonFile -p PHPParser_Parser $tmpGrammarFile 2>&1"));
./vendor/nikic/php-parser/grammar/rebuildParser.php-    echo "Output: \"$output\"\n";
./vendor/nikic/php-parser/grammar/analyze.php-
./vendor/nikic/php-parser/grammar/analyze.php:list($defs, $ruleBlocks) = magicSplit('%%', file_get_contents(GRAMMAR_FILE));
./vendor/nikic/php-parser/grammar/analyze.php-
./vendor/nikic/php-parser/test_old/run.php-    $startTime = microtime(true);
./vendor/nikic/php-parser/test_old/run.php:    $code = file_get_contents($file);
./vendor/nikic/php-parser/test_old/run.php-    $readTime += microtime(true) - $startTime;
./vendor/league/oauth2-server/src/League/OAuth2/Server/Authorization.php-     *
./vendor/league/oauth2-server/src/League/OAuth2/Server/Authorization.php:     * @param  array $inputParams Optional array of parsed $_POST keys
./vendor/league/oauth2-server/src/League/OAuth2/Server/Authorization.php-     * @return array             Authorise request parameters
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     *
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php:     * @param  array $inputParams Optional array of parsed $_GET keys
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     * @throws \OAuth2\Exception\ClientException
--
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     * @param  string $typeId      The session owner's ID
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php:     * @param  array  $authParams  The authorise request $_GET parameters
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     * @return string              An authorisation code
./vendor/league/oauth2-server/src/League/OAuth2/Server/Util/Request.php-    {
./vendor/league/oauth2-server/src/League/OAuth2/Server/Util/Request.php:        return new static($_GET, $_POST, $_COOKIE, $_FILES, $_SERVER);
./vendor/league/oauth2-server/src/League/OAuth2/Server/Util/Request.php-    }
./vendor/d11wtq/boris/lib/Boris/Config.php-  private $_cascade = false;
./vendor/d11wtq/boris/lib/Boris/Config.php:  private $_files   = array();
./vendor/d11wtq/boris/lib/Boris/Config.php-
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php:        $__result = eval($__input);
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-
--
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-      if (is_string($__hook)) {
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php:        eval($__hook);
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-      } elseif (is_callable($__hook)) {
./vendor/d11wtq/boris/lib/Boris/Boris.php-   *
./vendor/d11wtq/boris/lib/Boris/Boris.php:   * The hook is either a string of PHP code to eval(), or a Closure accepting
./vendor/d11wtq/boris/lib/Boris/Boris.php-   * the EvalWorker object as its first argument and the array of defined
--
./vendor/d11wtq/boris/lib/Boris/Boris.php-   *
./vendor/d11wtq/boris/lib/Boris/Boris.php:   * The hook is either a string of PHP code to eval(), or a Closure accepting
./vendor/d11wtq/boris/lib/Boris/Boris.php-   * the EvalWorker object as its first argument and the array of defined
./vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php:     * Will be called, automatically, when unserialize() is called on a Math_BigInteger object.
./vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php:        if (!$this->ssh->exec('scp -t "' . $remote_file . '"', false)) { // -t = to
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-            return false;
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php:        if (!$this->ssh->exec('scp -f "' . $remote_file . '"', false)) { // -f = from
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-            return false;
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php- *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php: *    echo $ssh->exec('ls -la');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php- * ?>
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     * Set by the constructor call. Calling setTimeout() is optional. If it's not called functions like
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php:     * exec() won't timeout unless some PHP setting forces it too. The timeout specified in the constructor,
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     * however, is non-optional. There will be a timeout, whether or not you set it. If you don't it'll be
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php:     * $ssh->exec('ping 127.0.0.1'); on a Linux host will never return and will run indefinitely.  setTimeout() makes it so it'll timeout.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     * Setting $timeout to false or 0 will mean there is no timeout.
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php:    function exec($cmd, $block = true)
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-    {
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php- *
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php: * Net_SSH2::exec() uses 0 and Net_SSH2::read() / Net_SSH2::write() use 1.
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php- *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php-                       "exec sftp-server";
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php:            // we don't do $this->exec($command, false) because exec() operates on a different channel and plus the SSH_MSG_CHANNEL_OPEN that exec() does
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php-            // is redundant
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php: *    echo $ssh->exec('pwd');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php: *    echo $ssh->exec('ls -la');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- * ?>
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- *    //$key->setPassword('whatever');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php: *    $key->loadKey(file_get_contents('privatekey'));
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @see Net_SSH2::_get_channel_packet()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @var Array
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @see Net_SSH2::_get_channel_packet()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @var Array
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @see Net_SSH2::_send_channel_packet()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @access private
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Flag to request a PTY when using exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Flag set while exec() is running when using enablePTY()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Flag set after startSubsystem() is called
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * Set by the constructor call. Calling setTimeout() is optional. If it's not called functions like
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * exec() won't timeout unless some PHP setting forces it too. The timeout specified in the constructor,
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * however, is non-optional. There will be a timeout, whether or not you set it. If you don't it'll be
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * $ssh->exec('ping 127.0.0.1'); on a Linux host will never return and will run indefinitely.  setTimeout() makes it so it'll timeout.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * Setting $timeout to false or 0 will mean there is no timeout.
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:    function exec($command, $callback = null)
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    {
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        // sending a pty-req SSH_MSG_CHANNEL_REQUEST message is unnecessary and, in fact, in most cases, slows things
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        // down.  the one place where it might be desirable is if you're doing something like Net_SSH2::exec('ping localhost &').
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        // with a pty-req SSH_MSG_CHANNEL_REQUEST, exec() will return immediately and the ping process will then
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        // then immediately terminate.  without such a request exec() will loop indefinitely.  the ping process won't end but
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        // neither will your script.
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Right now only one subsystem at a time is supported. To support multiple subsystem's stopSubsystem() could accept
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * a string that contained the name of the subsystem, but at that point, only one subsystem of each type could be opened.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * To support multiple subsystem's of the same name maybe it'd be best if startSubsystem() generated a new channel id and
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * returns that and then that that was passed into stopSubsystem() but that'll be saved for a future date and implemented
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * if there's sufficient demand for such a feature.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::stopSubsystem()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @param String $subsystem
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:    function startSubsystem($subsystem)
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    {
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::startSubsystem()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @return Boolean
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:    function stopSubsystem()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    {
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Did exec() or read() return because they timed out or because they encountered the end?
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        //if ($this->decompress) {
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        //    $payload = gzinflate(substr($payload, 2));
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        //}
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Enable request-pty when using exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Disable request-pty when using exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Net_SSH2 doesn't properly close most channels.  For exec() channels are normally closed by the server
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * and for SFTP channels are presumably closed when the client disconnects.  This functions is intended
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php- *
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php: *    echo $ssh->exec('pwd');
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php: *    echo $ssh->exec('ls -la');
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php- * ?>
./vendor/phpseclib/phpseclib/phpseclib/File/ASN1.php-                   -- http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf#page=16 */
./vendor/phpseclib/phpseclib/phpseclib/File/ASN1.php:                $value = base64_decode($source);
./vendor/phpseclib/phpseclib/phpseclib/File/ASN1.php-                break;
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        // assert($TBSCertificate['children']['signature'] == $Certificate['children']['signatureAlgorithm'])
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        $TBSCertificate = array(
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                        $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey']
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                            = base64_encode("\0" . base64_decode(preg_replace('#-.+-|[\r\n]#', '', $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey'])));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                $value = &$extensions[$i]['extnValue'];
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                $value = base64_decode($value);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                $decoded = $asn1->decodeBER($value);
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    // uses as a cert authority actually use a non-zero bit I think it's safe to assume that none do.
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    chunk_split(base64_encode(substr(base64_decode($key), 1)), 64) .
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    '-----END RSA PUBLIC KEY-----';
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-    {
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        $ip = base64_decode($ip);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        list(, $ip) = unpack('N', $ip);
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                        $csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey']
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                            = base64_encode("\0" . base64_decode(preg_replace('#-.+-|[\r\n]#', '', $csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey'])));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        $temp = preg_replace('#(?:SPKAC=)|[ \r\n\\\]#', '', $spkac);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        $temp = preg_match('#^[a-zA-Z\d/+]*={0,2}$#', $temp) ? base64_decode($temp) : false;
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        if ($temp != false) {
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                        $spkac['publicKeyAndChallenge']['spki']['subjectPublicKey']
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                            = base64_encode("\0" . base64_decode(preg_replace('#-.+-|[\r\n]#', '', $spkac['publicKeyAndChallenge']['spki']['subjectPublicKey'])));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                $raw = base64_decode($raw);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                // If the key is private, compute identifier from its corresponding public key.
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                // the former is a good example of how to do fuzzing on the public key
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                //return new File_ASN1_Element(base64_decode(preg_replace('#-.+-|[\r\n]#', '', $this->publicKey->getPublicKey())));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                return array(
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        $temp = str_replace(array("\r", "\n", ' '), '', $temp);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        $temp = preg_match('#^[a-zA-Z\d/+]*={0,2}$#', $temp) ? base64_decode($temp) : false;
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        return $temp != false ? $temp : $str;
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php-                serialize($_SERVER) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php:                serialize($_POST) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php:                serialize($_GET) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php-                serialize($_COOKIE) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php:                serialize($GLOBALS) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php-                serialize($_SESSION) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        if (!empty($partial)) {
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:            extract(unserialize($partial));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        } else {
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:                $key = isset($parts[1]) ? base64_decode($parts[1]) : false;
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                if ($key === false) {
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                $publicLength = trim(preg_replace('#Public-Lines: (\d+)#', '$1', $key[3]));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:                $public = base64_decode(implode('', array_map('trim', array_slice($key, 4, $publicLength))));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                $public = substr($public, 11);
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                $privateLength = trim(preg_replace('#Private-Lines: (\d+)#', '$1', $key[$publicLength + 4]));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:                $private = base64_decode(implode('', array_map('trim', array_slice($key, $publicLength + 5, $privateLength))));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        if (isset($this->current)) {
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:            $this->current = new Math_BigInteger(base64_decode($this->current), 256);
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-            unset($this->current);
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        $temp = str_replace(array("\r", "\n", ' '), '', $temp);
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:        $temp = preg_match('#^[a-zA-Z\d/+]*={0,2}$#', $temp) ? base64_decode($temp) : false;
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        return $temp != false ? $temp : $str;
./vendor/phpseclib/phpseclib/tests/Math/BigInteger/TestCase.php-        $x = $this->getInstance('18446744073709551616');
./vendor/phpseclib/phpseclib/tests/Math/BigInteger/TestCase.php:        $y = unserialize(serialize($x));
./vendor/phpseclib/phpseclib/tests/Math/BigInteger/TestCase.php-
./vendor/phpseclib/phpseclib/tests/Functional/Net/SSH2Test.php-            ->will($this->returnValue(true));
./vendor/phpseclib/phpseclib/tests/Functional/Net/SSH2Test.php:        $ssh->exec('pwd', array($callbackObject, 'callbackMethod'));
./vendor/phpseclib/phpseclib/tests/Functional/Net/SSH2Test.php-    }
./vendor/phpseclib/phpseclib/tests/Unit/Math/BigInteger/TestCase.php-        $x = $this->getInstance('18446744073709551616');
./vendor/phpseclib/phpseclib/tests/Unit/Math/BigInteger/TestCase.php:        $y = unserialize(serialize($x));
./vendor/phpseclib/phpseclib/tests/Unit/Math/BigInteger/TestCase.php-
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $asn1 = new File_ASN1();
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php:        $decoded = $asn1->decodeBER(base64_decode($str));
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $result = $asn1->asn1map($decoded[0], $AS_REP);
--
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $asn1 = new File_ASN1();
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php:        $decoded = $asn1->decodeBER(base64_decode($str));
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $result = $asn1->asn1map($decoded[0], $AS_REP);
./vendor/phpseclib/phpseclib/tests/Unit/Crypt/RSA/LoadKeyTest.php-               '37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=';
./vendor/phpseclib/phpseclib/tests/Unit/Crypt/RSA/LoadKeyTest.php:        $key = base64_decode($key);
./vendor/phpseclib/phpseclib/tests/Unit/Crypt/RSA/LoadKeyTest.php-
./vendor/phpseclib/phpseclib/tests/Crypt/RSA/LoadKeyTest.php-               '37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=';
./vendor/phpseclib/phpseclib/tests/Crypt/RSA/LoadKeyTest.php:        $key = base64_decode($key);
./vendor/phpseclib/phpseclib/tests/Crypt/RSA/LoadKeyTest.php-
./vendor/rtablada/package-installer/tests/Rtablada/PackageInstaller/PackageSearchCommandTest.php-		$factory = new Factory;
./vendor/rtablada/package-installer/tests/Rtablada/PackageInstaller/PackageSearchCommandTest.php:		$this->results = json_decode(file_get_contents(__DIR__.'/stubs/results.json'), true);
./vendor/rtablada/package-installer/tests/Rtablada/PackageInstaller/PackageSearchCommandTest.php-		$this->results = $factory->create($this->results);
./vendor/rtablada/package-installer/src/Rtablada/PackageInstaller/PackageRequireCommand.php-	{
./vendor/rtablada/package-installer/src/Rtablada/PackageInstaller/PackageRequireCommand.php:		passthru('composer require ' . $this->argument('packageName'));
./vendor/rtablada/package-installer/src/Rtablada/PackageInstaller/PackageRequireCommand.php-	}
./vendor/predis/predis/lib/Predis/Connection/WebdisConnection.php-
./vendor/predis/predis/lib/Predis/Connection/WebdisConnection.php:        if (curl_exec($resource) === false) {
./vendor/predis/predis/lib/Predis/Connection/WebdisConnection.php-            $error = curl_error($resource);
./vendor/predis/predis/lib/Predis/Client.php-     * @deprecated You should start using the new Client::transaction() method
./vendor/predis/predis/lib/Predis/Client.php:     *             as it will replace Client::multiExec() in the next major
./vendor/predis/predis/lib/Predis/Client.php-     *             version of the library.
--
./vendor/predis/predis/lib/Predis/Client.php-     */
./vendor/predis/predis/lib/Predis/Client.php:    public function multiExec(/* arguments */)
./vendor/predis/predis/lib/Predis/Client.php-    {
--
./vendor/predis/predis/lib/Predis/Client.php-     */
./vendor/predis/predis/lib/Predis/Client.php:    protected function initMultiExec(Array $options = null, $callable = null)
./vendor/predis/predis/lib/Predis/Client.php-    {
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-     */
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php:    public function exec()
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-    {
--
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php:            $reply = $this->client->exec();
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php:        if ($match = eval("return $comparation $operator 0;")) {
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-            call_user_func($callback, $this, $version);
--
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php:        if ($match = eval("return $comparation $operator 0;")) {
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-            call_user_func($callback, $this, $version);
--
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php:        if (!$match = eval("return $comparation $expOperator 0;")) {
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-            $this->markTestSkipped(
./vendor/predis/predis/tests/Predis/Connection/MasterSlaveReplicationTest.php-
./vendor/predis/predis/tests/Predis/Connection/MasterSlaveReplicationTest.php:        $unserialized = unserialize(serialize($replication));
./vendor/predis/predis/tests/Predis/Connection/MasterSlaveReplicationTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/PhpiredisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/ConnectionParametersTest.php-        $parameters = new ConnectionParameters(array('port' => 7000, 'custom' => 'foobar'));
./vendor/predis/predis/tests/Predis/Connection/ConnectionParametersTest.php:        $unserialized = unserialize(serialize($parameters));
./vendor/predis/predis/tests/Predis/Connection/ConnectionParametersTest.php-
./vendor/predis/predis/tests/Predis/Connection/PredisClusterTest.php-        $cluster->getConnectionByKey('foo');
./vendor/predis/predis/tests/Predis/Connection/PredisClusterTest.php:        $unserialized = unserialize(serialize($cluster));
./vendor/predis/predis/tests/Predis/Connection/PredisClusterTest.php-
./vendor/predis/predis/tests/Predis/Connection/ComposableStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/ComposableStreamConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/ComposableStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/StreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/StreamConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/StreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisStreamConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/PhpiredisStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/RedisClusterTest.php-
./vendor/predis/predis/tests/Predis/Connection/RedisClusterTest.php:        $unserialized = unserialize(serialize($cluster));
./vendor/predis/predis/tests/Predis/Connection/RedisClusterTest.php-
./vendor/predis/predis/tests/Predis/Connection/WebdisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/WebdisConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/WebdisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php:        $this->assertSame($result, $redis->eval($lua, 2, 'foo', 'hoge', 'bar', 'piyo'));
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php:        $redis->eval($lua, 3, 'foo', 'hoge');
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php:        $redis->eval('invalid', 0);
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-    }
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertTrue($redis2->set('foo', 'hijacked'));
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php:        $this->assertNull($redis1->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertSame('hijacked', $redis1->get('foo'));
--
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertTrue($redis2->set('foo', 'hijacked'));
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php:        $this->assertNull($redis1->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertSame('hijacked', $redis1->get('foo'));
./vendor/predis/predis/tests/Predis/Command/ServerScriptTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerScriptTest.php:        $redis->eval($lua = 'return true', 0);
./vendor/predis/predis/tests/Predis/Command/ServerScriptTest.php-        $sha1 = sha1($lua);
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $this->assertSame(array('tx1', 'tx2'), $redis->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $this->assertSame(array(), $redis->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $this->assertSame(array('PONG', true, 1), $redis->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $redis->exec();
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
./vendor/predis/predis/tests/Predis/Command/TransactionUnwatchTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionUnwatchTest.php:        $this->assertSame(array('hijacked'), $redis1->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionUnwatchTest.php-    }
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php:        $this->assertSame($result, $redis->eval($lua, 2, 'foo', 'hoge', 'bar', 'piyo'));
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-        $this->assertSame($result, $redis->evalsha($sha1, 2, 'foo', 'hoge', 'bar', 'piyo'));
--
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php:        $redis->eval($lua, 2, 'foo', 'hoge', 'bar', 'piyo');
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-        $redis->evalsha($sha1, 3, 'foo', 'hoge');
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        $replies = $tx->execute(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $tx->exec();
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        });
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-     */
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:    public function testCheckAndSetWithoutExec()
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-    {
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $tx->multi()->set('foo', 'bar')->echo('simulated failure')->exec();
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        } catch (\Exception $exception) {
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $tx->multi()->set('foo', 'bar')->echo('simulated failure')->exec();
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        } catch (\Exception $exception) {
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $client->multiExec(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-                $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $client->multiExec(function ($tx) use ($value) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-                $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $client1->multiExec(array('watch' => 'sentinel'), function ($tx) use ($client2) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-                $tx->set('sentinel', 'client1');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec($options, function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $tx->watch('foobar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        $options = array('watch' => 'foo', 'cas' => true, 'retry' => 1);
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec($options, function ($tx) use ($client2, &$hijack) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $foo = $tx->get('foo');
./vendor/predis/predis/tests/Predis/ClientTest.php-
./vendor/predis/predis/tests/Predis/ClientTest.php:        $this->assertInstanceOf('Predis\Transaction\MultiExecContext', $client->multiExec());
./vendor/predis/predis/tests/Predis/ClientTest.php-    }
--
./vendor/predis/predis/tests/Predis/ClientTest.php-     */
./vendor/predis/predis/tests/Predis/ClientTest.php:    public function testMethodTransactionIsAliasForMethodMultiExec()
./vendor/predis/predis/tests/Predis/ClientTest.php-    {
--
./vendor/predis/predis/tests/Predis/ClientTest.php-
./vendor/predis/predis/tests/Predis/ClientTest.php:        $this->assertInstanceOf('Predis\Transaction\MultiExecContext', $tx = $client->multiExec($options));
./vendor/predis/predis/tests/Predis/ClientTest.php-
--
./vendor/predis/predis/tests/Predis/ClientTest.php-     */
./vendor/predis/predis/tests/Predis/ClientTest.php:    public function testMultiExecWithArrayAndCallableExecutesMultiExec()
./vendor/predis/predis/tests/Predis/ClientTest.php-    {
--
./vendor/predis/predis/tests/Predis/ClientTest.php-        $client = new Client($connection);
./vendor/predis/predis/tests/Predis/ClientTest.php:        $client->multiExec($options, $callable);
./vendor/predis/predis/tests/Predis/ClientTest.php-    }
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php-    // get current mime types files
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php:    $mime_types = @file_get_contents(APACHE_MIME_TYPES_URL);
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php:    $mime_xml   = @file_get_contents(FREEDESKTOP_XML_URL);
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php-
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php-    {
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php:        if (($content = file_get_contents($this->getPath())) === false) {
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php-            throw new Swift_IoException('Failed to get temporary file content.');
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php-            // AUTH NTLM xxxx
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php:            $response = base64_decode(substr(trim($this->sendMessage1($agent)), 4));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php-
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php-            $challenge = $agent->executeCommand("AUTH CRAM-MD5\r\n", array(334));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php:            $challenge = base64_decode(substr($challenge, 4));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php-            $message = base64_encode(
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php-            if (rename($file, $file.'.sending')) {
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php:                $message = unserialize(file_get_contents($file.'.sending'));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php-        $file->flushBuffers();
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php:        $this->assertEquals("foo\nbar\nzip\ntest\n", file_get_contents($this->_testFile));
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php-    }
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-                    $this->assertEquals(
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php:                        base64_decode($encoded), $text,
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-                        '%s: Encoded string should decode back to original string for sample ' .
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-                    $encodedText = $this->_encoder->encodeString($text);
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-                    $encodedText = $encoder->encodeString($text);
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-                    $this->assertEquals(
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php:                        urldecode(implode('', explode("\r\n", $encodedText))), $text,
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-                        '%s: Encoded string should decode back to original string for sample ' .
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php-                    $encodedText = $encoder->encodeString($text);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-                    $encodedText = $this->_encoder->encodeString($text);
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-                    $this->assertEquals(
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php:                        base64_decode($encodedText), $text,
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-                        '%s: Encoded string should decode back to original string for sample ' .
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        /* @var $signer Swift_Signers_HeaderSigner */
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setSignatureTimestamp('1299879181');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php-            "\r\n" .
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php:            preg_quote(base64_encode(file_get_contents($this->_attFile)), '~') .
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php-            "\r\n\r\n" .
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:            $emailSource = file_get_contents($this->_outputFile);
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-            $this->assertAttachmentFromSourceMatches(
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:                file_get_contents($this->_attachmentFile),
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-                $emailSource
--
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-            $this->assertAttachmentFromSourceMatches(
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:                file_get_contents($this->_attachmentFile),
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-                $emailSource
--
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:        $this->assertIdenticalBinary($attachmentData, base64_decode($attachmentBase64));
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-    }
./vendor/swiftmailer/swiftmailer/create_pear_package.php-
./vendor/swiftmailer/swiftmailer/create_pear_package.php:$template = file_get_contents(dirname(__FILE__).'/package.xml.tpl');
./vendor/swiftmailer/swiftmailer/create_pear_package.php-$content = preg_replace_callback('/\{\{\s*([a-zA-Z0-9_]+)\s*\}\}/', 'replace_parameters', $template);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-{
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:    $GLOBALS['error_log'][] = func_get_args();
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-}
--
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-    {
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $GLOBALS['error_log'] = array();
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-    }
--
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame("test.ERROR: Foo\nBar\r\n\r\nBaz [] []", $GLOBALS['error_log'][0][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][0][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
--
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertStringMatchesFormat('[%s] test.ERROR: Foo', $GLOBALS['error_log'][1][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][1][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertStringMatchesFormat('Bar', $GLOBALS['error_log'][2][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][2][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertStringMatchesFormat('Baz [] []', $GLOBALS['error_log'][3][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][3][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-    }
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-        $this->assertTrue(file_exists($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:        $this->assertEquals('test', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-    }
--
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-        $this->assertEquals($createFile, file_exists($old4));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:        $this->assertEquals('test', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-    }
--
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:        $this->assertEquals('footest', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-    }
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php-
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:        if (false === @file_get_contents($url, null, $context)) {
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php-            throw new \RuntimeException(sprintf('Could not connect to %s', $url));
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php-
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:        curl_exec($ch);
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php-        curl_close($ch);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php-
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:        return curl_exec($this->httpConnection);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php-    }
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-        } else {
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php:            $content = file_get_contents($file);
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-        }
--
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-        $this->output->writeln('> Loading configuration file');
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php:        $filesystem = new Filesystem();
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-
2015-08-12_09:22:24 end
2015-08-12_09:24:22 start
============changetime list==========

============nouser file list==========

============php one word trojan ==========

./server.php-
./server.php:$uri = urldecode($uri);
./server.php-
./app/controllers/ResourceController.php-		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
./app/controllers/ResourceController.php:		$data = curl_exec($ch);
./app/controllers/ResourceController.php-		curl_close($ch) ;
./app/controllers/ResourceInfoController.php-		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
./app/controllers/ResourceInfoController.php:		$data = curl_exec($ch);
./app/controllers/ResourceInfoController.php-		curl_close($ch) ;
./vendor/guzzle/http/Guzzle/Http/Message/Response.php-
./vendor/guzzle/http/Guzzle/Http/Message/Response.php:    public function unserialize($serialize)
./vendor/guzzle/http/Guzzle/Http/Message/Response.php-    {
./vendor/guzzle/http/Guzzle/Http/QueryString.php-            $parts = explode('=', $kvp, 2);
./vendor/guzzle/http/Guzzle/Http/QueryString.php:            $key = rawurldecode($parts[0]);
./vendor/guzzle/http/Guzzle/Http/QueryString.php-            if ($paramIsPhpStyleArray = substr($key, -2) == '[]') {
--
./vendor/guzzle/http/Guzzle/Http/QueryString.php-            if (isset($parts[1])) {
./vendor/guzzle/http/Guzzle/Http/QueryString.php:                $value = rawurldecode(str_replace('+', '%20', $parts[1]));
./vendor/guzzle/http/Guzzle/Http/QueryString.php-                if (isset($q[$key])) {
./vendor/guzzle/http/Guzzle/Http/Curl/CurlMulti.php-        do {
./vendor/guzzle/http/Guzzle/Http/Curl/CurlMulti.php:            while (($mrc = curl_multi_exec($this->multiHandle, $active)) == CURLM_CALL_MULTI_PERFORM);
./vendor/guzzle/http/Guzzle/Http/Curl/CurlMulti.php-            $this->checkCurlResult($mrc);
./vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php-                if ($decode) {
./vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php:                    $value = urldecode($value);
./vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php-                }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        list($this->credentials, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-    }
--
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        $uToken = unserialize(serialize($token));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
--
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-        $parentToken = new ConcreteToken($user, array(new SwitchUserRole('ROLE_PREVIOUS', $token)));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php:        $uToken = unserialize(serialize($parentToken));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/AbstractTokenTest.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:        list($this->credentials, $this->providerKey, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php:        list($this->key, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AnonymousToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php:        list($this->key, $this->providerKey, $parentStr) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/RememberMeToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php:        list($this->credentials, $this->providerKey, $parentStr) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php:        parent::unserialize($parentStr);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/PreAuthenticatedToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:    public function unserialize($serialized)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:        list($this->user, $this->authenticated, $this->roles, $this->attributes) = unserialize($serialized);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-    {
--
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-            $this->line
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php:        ) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AuthenticationException.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php:        list($this->username, $parentData) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php:        parent::unserialize($parentData);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-     */
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php:    public function unserialize($str)
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php:        list($this->user, $parentData) = unserialize($str);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php:        parent::unserialize($parentData);
./vendor/symfony/security-core/Symfony/Component/Security/Core/Exception/AccountStatusException.php-    }
./vendor/symfony/security-core/Symfony/Component/Security/Core/Util/SecureRandom.php-    {
./vendor/symfony/security-core/Symfony/Component/Security/Core/Util/SecureRandom.php:        return json_decode(file_get_contents($this->seedFile));
./vendor/symfony/security-core/Symfony/Component/Security/Core/Util/SecureRandom.php-    }
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        parent::setUp();
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->filesystem = new Filesystem();
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('TARGET FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals('SOURCE FILE', file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($targetFilePath);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertEquals(file_get_contents($sourceFilePath), file_get_contents($targetFilePath));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($filename);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertSame('bar', file_get_contents($filename));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($filename);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertSame('bar', file_get_contents($filename));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-
--
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-        $this->assertFileExists($filename);
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php:        $this->assertSame('bar', file_get_contents($filename));
./vendor/symfony/filesystem/Symfony/Component/Filesystem/Tests/FilesystemTest.php-    }
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Cookie.php-        if ($encodedValue) {
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Cookie.php:            $this->value    = urldecode($value);
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Cookie.php-            $this->rawValue = $value;
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Client.php-
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Client.php:        return unserialize($process->getOutput());
./vendor/symfony/browser-kit/Symfony/Component/BrowserKit/Client.php-    }
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher3.php-        $allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher3.php:        $pathinfo = rawurldecode($pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher3.php-        $context = $this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php-        $allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php:        $pathinfo = rawurldecode($pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php-        $context = $this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php-        $allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php:        $pathinfo = rawurldecode($pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php-        $context = $this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteTest.php-        $serialized = serialize($route);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteTest.php:        $unserialized = unserialize($serialized);
./vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteTest.php-
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/UrlMatcher.php-
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/UrlMatcher.php:        if ($ret = $this->matchCollection(rawurldecode($pathinfo), $this->routes)) {
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/UrlMatcher.php-            return $ret;
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php-        \$allow = array();
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php:        \$pathinfo = rawurldecode(\$pathinfo);
./vendor/symfony/routing/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php-        \$context = \$this->context;
./vendor/symfony/routing/Symfony/Component/Routing/Route.php-
./vendor/symfony/routing/Symfony/Component/Routing/Route.php:    public function unserialize($data)
./vendor/symfony/routing/Symfony/Component/Routing/Route.php-    {
./vendor/symfony/routing/Symfony/Component/Routing/Route.php:        $data = unserialize($data);
./vendor/symfony/routing/Symfony/Component/Routing/Route.php-        $this->path = $data['path'];
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $globals = array(
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            'path'         => '',
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getPath()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['path'] = $annot->getPath();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            } elseif (null !== $annot->getPattern()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['path'] = $annot->getPattern();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getRequirements()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['requirements'] = $annot->getRequirements();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getOptions()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['options'] = $annot->getOptions();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getDefaults()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['defaults'] = $annot->getDefaults();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getSchemes()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['schemes'] = $annot->getSchemes();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getMethods()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['methods'] = $annot->getMethods();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getHost()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['host'] = $annot->getHost();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            if (null !== $annot->getCondition()) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                $globals['condition'] = $annot->getCondition();
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-            }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-                if ($annot instanceof $this->routeAnnotationClass) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:                    $this->addRoute($collection, $annot, $globals, $class, $method);
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-                }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:    protected function addRoute(RouteCollection $collection, $annot, $globals, \ReflectionClass $class, \ReflectionMethod $method)
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-    {
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $defaults = array_replace($globals['defaults'], $annot->getDefaults());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        foreach ($method->getParameters() as $param) {
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        }
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $requirements = array_replace($globals['requirements'], $annot->getRequirements());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $options = array_replace($globals['options'], $annot->getOptions());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $schemes = array_replace($globals['schemes'], $annot->getSchemes());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $methods = array_replace($globals['methods'], $annot->getMethods());
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        if (null === $host) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:            $host = $globals['host'];
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        }
--
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        if (null === $condition) {
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:            $condition = $globals['condition'];
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-        }
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php:        $route = new Route($globals['path'].$annot->getPath(), $defaults, $requirements, $options, $host, $schemes, $methods, $condition);
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationClassLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/YamlFileLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/YamlFileLoader.php:        $config = $this->yamlParser->parse(file_get_contents($path));
./vendor/symfony/routing/Symfony/Component/Routing/Loader/YamlFileLoader.php-
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationFileLoader.php-        $namespace = false;
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationFileLoader.php:        $tokens = token_get_all(file_get_contents($file));
./vendor/symfony/routing/Symfony/Component/Routing/Loader/AnnotationFileLoader.php-        for ($i = 0, $count = count($tokens); $i < $count; $i++) {
./vendor/symfony/console/Symfony/Component/Console/Tests/Descriptor/AbstractDescriptorTest.php-        foreach ($objects as $name => $object) {
./vendor/symfony/console/Symfony/Component/Console/Tests/Descriptor/AbstractDescriptorTest.php:            $description = file_get_contents(sprintf('%s/../Fixtures/%s.%s', __DIR__, $name, $this->getFormat()));
./vendor/symfony/console/Symfony/Component/Console/Tests/Descriptor/AbstractDescriptorTest.php-            $data[] = array($object, $description);
./vendor/symfony/console/Symfony/Component/Console/Tests/Helper/DialogHelperTest.php-    {
./vendor/symfony/console/Symfony/Component/Console/Tests/Helper/DialogHelperTest.php:        exec('stty 2>&1', $output, $exitcode);
./vendor/symfony/console/Symfony/Component/Console/Tests/Helper/DialogHelperTest.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $sttyMode = shell_exec('stty -g');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            // Disable icanon (so we can fread each keypress) and echo (we'll do echoing here instead)
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec('stty -icanon -echo');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            // Reset stty so it behaves normally again
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec(sprintf('stty %s', $sttyMode));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-        }
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $output->write($question);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $value = rtrim(shell_exec($exe));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $output->writeln('');
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $sttyMode = shell_exec('stty -g');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec('stty -echo');
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $value = fgets($this->inputStream ?: STDIN, 4096);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            shell_exec(sprintf('stty %s', $sttyMode));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $command = sprintf("/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \$mypassword'", $shell, $readCmd);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:            $value = rtrim(shell_exec($command));
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            $output->writeln('');
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-            foreach (array('bash', 'zsh', 'ksh', 'csh') as $sh) {
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:                if ('OK' === rtrim(shell_exec(sprintf($test, $sh)))) {
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-                    self::$shell = $sh;
--
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:        exec('stty 2>&1', $output, $exitcode);
./vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php-
./vendor/symfony/process/Symfony/Component/Process/Process.php-            if (defined('PHP_WINDOWS_VERSION_BUILD') && !$this->isSigchildEnabled()) {
./vendor/symfony/process/Symfony/Component/Process/Process.php:                exec(sprintf("taskkill /F /T /PID %d 2>&1", $this->getPid()), $output, $exitCode);
./vendor/symfony/process/Symfony/Component/Process/Process.php-                if ($exitCode > 0) {
./vendor/symfony/process/Symfony/Component/Process/Tests/AbstractProcessTest.php-        $variations = array(
./vendor/symfony/process/Symfony/Component/Process/Tests/AbstractProcessTest.php:            'fwrite(STDOUT, $in = file_get_contents(\'php://stdin\')); fwrite(STDERR, $in);',
./vendor/symfony/process/Symfony/Component/Process/Tests/AbstractProcessTest.php-            'include \''.__DIR__.'/PipeStdinInStdoutStdErrStreamSelect.php\';',
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php-            'method' => $request->getMethod(),
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php:            'path' => rawurldecode($request->getPathInfo()),
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php-            'host' => $request->getHost(),
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php-        $filePath = $this->getFilePath();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php:        $this->data = is_readable($filePath) && is_file($filePath) ? unserialize(file_get_contents($filePath)) : array();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php-            if ($sessionRows) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php:                return base64_decode($sessionRows[0][0]);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php-            }
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * Request body parameters ($_POST)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * Query string parameters ($_GET)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * Uploaded files ($_FILES)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $request = self::createRequestFromFactory($_GET, $_POST, array(), $_COOKIE, $_FILES, $_SERVER);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     * @param array  $cookies    The request cookies ($_COOKIE)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * @param array  $files      The request files ($_FILES)
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     * @param array  $server     The server parameters ($_SERVER)
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:     * $_FILES is never override, see rfc1867
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-     *
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $_GET = $this->query->all();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $_POST = $this->request->all();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        $_SERVER = $this->server->all();
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $request = array('g' => $_GET, 'p' => $_POST, 'c' => $_COOKIE);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        $_REQUEST = array();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        foreach (str_split($requestOrder) as $order) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:            $_REQUEST = array_merge($_REQUEST, $request[$order]);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-            $parts[] = isset($keyValuePair[1]) ?
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:                rawurlencode(urldecode($keyValuePair[0])).'='.rawurlencode(urldecode($keyValuePair[1])) :
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:                rawurlencode(urldecode($keyValuePair[0]));
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:            $order[] = urldecode($keyValuePair[0]);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        if (null === $this->content) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:            $this->content = file_get_contents('php://input');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-        $basename = basename($baseUrl);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        if (empty($basename) || !strpos(rawurldecode($truncatedRequestUri), $basename)) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-            // no match whatsoever; set it blank
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-    {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:        if (0 !== strpos(rawurldecode($string), $prefix)) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php-            return false;
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-        $sql = 'CREATE TABLE sessions (sess_id VARCHAR(128) PRIMARY KEY, sess_data TEXT, sess_time INTEGER)';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php:        $this->pdo->exec($sql);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-    }
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_SILENT);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php:        $pdo->exec('CREATE TABLE sessions (sess_id VARCHAR(128) PRIMARY KEY, sess_data TEXT, sess_time INTEGER)');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_GET['foo1']    = 'bar1';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_POST['foo2']   = 'bar2';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $_COOKIE['foo3'] = 'bar3';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_FILES['foo4']  = array('bar4');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $_SERVER['foo5'] = 'bar5';
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $request = Request::createFromGlobals();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals('bar1', $request->query->get('foo1'), '::fromGlobals() uses values from $_GET');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals('bar2', $request->request->get('foo2'), '::fromGlobals() uses values from $_POST');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $this->assertEquals('bar3', $request->cookies->get('foo3'), '::fromGlobals() uses values from $_COOKIE');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals(array('bar4'), $request->files->get('foo4'), '::fromGlobals() uses values from $_FILES');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $this->assertEquals('bar5', $request->server->get('foo5'), '::fromGlobals() uses values from $_SERVER');
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        unset($_GET['foo1'], $_POST['foo2'], $_COOKIE['foo3'], $_FILES['foo4'], $_SERVER['foo5']);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        Request::enableHttpMethodParameterOverride();
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_POST['_method']   = $method;
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $_POST['foo6']      = 'bar6';
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $_SERVER['REQUEST_METHOD'] = 'PoSt';
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        unset($_POST['_method'], $_POST['foo6'], $_SERVER['REQUEST_METHOD']);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-        $this->disableHttpMethodParameterOverride();
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals(array('foo' => 'bar'), $_GET);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:        $this->assertEquals(array('foo' => 'bar'), $_POST);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ServerBag.php-                    // Decode AUTHORIZATION header into PHP_AUTH_USER and PHP_AUTH_PW when authorization header is basic
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ServerBag.php:                    $exploded = explode(':', base64_decode(substr($authorizationHeader, 6)));
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/ServerBag.php-                    if (count($exploded) == 2) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php:     * Fixes a malformed PHP $_FILES array.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php:     * PHP has a bug that the format of the $_FILES array differs, depending on
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     * whether the uploaded file fields had normal field names or array-like
--
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php:     * This method fixes the array to look like the "normal" $_FILES array.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/FileBag.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/RequestMatcher.php-
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/RequestMatcher.php:        if (null !== $this->path && !preg_match('{'.$this->path.'}', rawurldecode($request->getPathInfo()))) {
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/RequestMatcher.php-            return false;
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/UploadedFile.php-    /**
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/UploadedFile.php:     * Accepts the information of the uploaded file as provided by the PHP global $_FILES.
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/UploadedFile.php-     *
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/MimeType/FileBinaryMimeTypeGuesser.php-        // need to use --mime instead of -i. see #6641
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/MimeType/FileBinaryMimeTypeGuesser.php:        passthru(sprintf($this->cmd, escapeshellarg($path)), $return);
./vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/File/MimeType/FileBinaryMimeTypeGuesser.php-        if ($return > 0) {
./vendor/symfony/debug/Symfony/Component/Debug/Tests/ErrorHandlerTest.php-        try {
./vendor/symfony/debug/Symfony/Component/Debug/Tests/ErrorHandlerTest.php:            eval(<<<'PHP'
./vendor/symfony/debug/Symfony/Component/Debug/Tests/ErrorHandlerTest.php-class _BaseCompileTimeError { function foo() {} }
./vendor/symfony/debug/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php-                    'args' => array(
./vendor/symfony/debug/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php:                        unserialize('O:14:"BogusTestClass":0:{}')
./vendor/symfony/debug/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php-                    ),
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IcuResFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IcuResFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resourcebundle/res/en.res'), file_get_contents($tempDir.'/messages/en.res'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IcuResFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources-clean.xlf'), file_get_contents($tempDir.'/messages.en.xlf'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/MoFileDumperTest.php-        $dumper->dump($catalogue, array('path' => $tempDir));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/MoFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.mo'), file_get_contents($tempDir.'/messages.en.mo'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/MoFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PoFileDumperTest.php-        $dumper->dump($catalogue, array('path' => $tempDir));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PoFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.po'), file_get_contents($tempDir.'/messages.en.po'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PoFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/JsonFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/JsonFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.json'), file_get_contents($tempDir.'/messages.en.json'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/JsonFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/CsvFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/CsvFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/valid.csv'), file_get_contents($tempDir.'/messages.en.csv'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/CsvFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/YamlFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/YamlFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.yml'), file_get_contents($tempDir.'/messages.en.yml'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/YamlFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PhpFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PhpFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.php'), file_get_contents($tempDir.'/messages.en.php'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/PhpFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/QtFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/QtFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.ts'), file_get_contents($tempDir.'/resources.en.ts'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/QtFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IniFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IniFileDumperTest.php:        $this->assertEquals(file_get_contents(__DIR__.'/../fixtures/resources.ini'), file_get_contents($tempDir.'/messages.en.ini'));
./vendor/symfony/translation/Symfony/Component/Translation/Tests/Dumper/IniFileDumperTest.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/JsonFileLoader.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/JsonFileLoader.php:        $messages = json_decode(file_get_contents($resource), true);
./vendor/symfony/translation/Symfony/Component/Translation/Loader/JsonFileLoader.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/XliffFileLoader.php-
./vendor/symfony/translation/Symfony/Component/Translation/Loader/XliffFileLoader.php:        $source = file_get_contents(__DIR__.'/schema/dic/xliff-core/xliff-core-1.2-strict.xsd');
./vendor/symfony/translation/Symfony/Component/Translation/Loader/XliffFileLoader.php-        $source = str_replace('http://www.w3.org/2001/xml.xsd', $location, $source);
./vendor/symfony/translation/Symfony/Component/Translation/Loader/YamlFileLoader.php-        try {
./vendor/symfony/translation/Symfony/Component/Translation/Loader/YamlFileLoader.php:            $messages = $this->yamlParser->parse(file_get_contents($resource));
./vendor/symfony/translation/Symfony/Component/Translation/Loader/YamlFileLoader.php-        } catch (ParseException $e) {
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-        $crawler = new Crawler();
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php:        $crawler->addHtmlContent(file_get_contents(__DIR__.'/Fixtures/windows-1250.html'), 'Windows-1250');
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-
--
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-        //gbk encode of <html><p>中文</p></html>
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php:        $crawler->addHtmlContent(base64_decode('PGh0bWw+PHA+1tDOxDwvcD48L2h0bWw+'), 'gbk');
./vendor/symfony/dom-crawler/Symfony/Component/DomCrawler/Tests/CrawlerTest.php-
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php-                case SortableIterator::SORT_BY_ACCESSED_TIME :
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php:                    file_get_contents(self::toAbsolute('.git'));
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php-                    sleep(1);
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php:                    file_get_contents(self::toAbsolute('.bar'));
./vendor/symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php-                    break;
./vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php-        $level = error_reporting(0);
./vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php:        $content = file_get_contents($this->getPathname());
./vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php-        error_reporting($level);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php-        // todo: find a better way (command could not be available)
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php:        exec('command -v '.$command, $output, $code);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php-
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-    {
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php:        return escapeshellcmd($input);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-    }
--
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-        if (null === $this->errorHandler) {
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php:            exec($this->join(), $output);
./vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php-        } else {
./vendor/symfony/css-selector/Symfony/Component/CssSelector/Tests/XPath/TranslatorTest.php-        $translator = new Translator();
./vendor/symfony/css-selector/Symfony/Component/CssSelector/Tests/XPath/TranslatorTest.php:        $document = new \SimpleXMLElement(file_get_contents(__DIR__.'/Fixtures/lang.xml'));
./vendor/symfony/css-selector/Symfony/Component/CssSelector/Tests/XPath/TranslatorTest.php-        $elements = $document->xpath($translator->cssToXPath($css));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-            } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php:                eval('; ?>'.$response->getContent().'<?php ;');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-            }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-        } elseif ($response->headers->has('X-Body-File')) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php:            $response->setContent(file_get_contents($response->headers->get('X-Body-File')));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/HttpCache.php-        } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php:        return unserialize($entries);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-    }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php:        return is_file($path) ? file_get_contents($path) : false;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-    }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php:        if ($data != file_get_contents($tmpFile)) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/HttpCache/Store.php-            return false;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php:    public function unserialize($data)
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php-    {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php:        $this->data = unserialize($data);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/DataCollector/DataCollector.php-    }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTestCase.php-        foreach (new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator(sys_get_temp_dir().'/http_cache/md', \RecursiveDirectoryIterator::SKIP_DOTS), \RecursiveIteratorIterator::LEAVES_ONLY) as $file) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTestCase.php:            $values[] = file_get_contents($file);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTestCase.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $this->assertCount(1, $values);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php:        $tmp = unserialize($values[0]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $tmp[0][1]['date'] = \DateTime::createFromFormat('U', time() - 5)->format(DATE_RFC2822);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $this->assertCount(1, $values);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php:        $tmp = unserialize($values[0]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $tmp[0][1]['date'] = \DateTime::createFromFormat('U', time() - 5)->format(DATE_RFC2822);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $this->assertCount(1, $values);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php:        $tmp = unserialize($values[0]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php-        $time = \DateTime::createFromFormat('U', time());
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcachedMock.php-        if (isset($this->storage[$key])) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcachedMock.php:            return unserialize($this->storage[$key]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcachedMock.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/RedisMock.php-        if (isset($this->storage[$key])) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/RedisMock.php:            return unserialize($this->storage[$key]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/RedisMock.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcacheMock.php-        if (isset($this->storage[$key])) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcacheMock.php:            return unserialize($this->storage[$key]);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/Mock/MemcacheMock.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php:\$kernel = unserialize('$kernel');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php:\$request = unserialize('$request');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Client.php-EOF;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/EventListener/FragmentListener.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/EventListener/FragmentListener.php:        if ($this->fragmentPath !== rawurldecode($request->getPathInfo())) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/EventListener/FragmentListener.php-            return;
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/Profiler.php-    {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/Profiler.php:        $profile = unserialize(base64_decode($data));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/Profiler.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php:        return $this->createProfileFromData($token, unserialize(file_get_contents($file)));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-    }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php:            $profile->addChild($this->createProfileFromData($token, unserialize(file_get_contents($file)), $profile));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php-            $db = new \PDO($this->dsn, $this->username, $this->password);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php:            $db->exec('CREATE TABLE IF NOT EXISTS sf_profiler_data (token VARCHAR(255) PRIMARY KEY, data LONGTEXT, ip VARCHAR(64), method VARCHAR(6), url VARCHAR(255), time INTEGER UNSIGNED, parent VARCHAR(255), created_at INTEGER UNSIGNED, KEY (created_at), KEY (ip), KEY (method), KEY (url), KEY (parent))');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('PRAGMA temp_store=MEMORY; PRAGMA journal_mode=MEMORY;');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE TABLE IF NOT EXISTS sf_profiler_data (token STRING, data STRING, ip STRING, method STRING, url STRING, time INTEGER, parent STRING, created_at INTEGER)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_created_at ON sf_profiler_data (created_at)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_ip ON sf_profiler_data (ip)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_method ON sf_profiler_data (method)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_url ON sf_profiler_data (url)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE INDEX IF NOT EXISTS data_parent ON sf_profiler_data (parent)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            $db->exec('CREATE UNIQUE INDEX IF NOT EXISTS data_token ON sf_profiler_data (token)');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:    protected function exec($db, $query, array $args = array())
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-    {
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-        } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php:            parent::exec($db, $query, $args);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/SqliteProfilerStorage.php-        }
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php-        $profile->setTime($data['time']);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php:        $profile->setCollectors(unserialize(base64_decode($data['data'])));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-            if ($this->has($profile->getToken())) {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:                $this->exec($db, 'UPDATE sf_profiler_data SET parent = :parent, data = :data, ip = :ip, method = :method, url = :url, time = :time, created_at = :created_at WHERE token = :token', $args);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-            } else {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:                $this->exec($db, 'INSERT INTO sf_profiler_data (token, parent, data, ip, method, url, time, created_at) VALUES (:token, :parent, :data, :ip, :method, :url, :time, :created_at)', $args);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-            }
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $db = $this->initDb();
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:        $this->exec($db, 'DELETE FROM sf_profiler_data');
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $this->close($db);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $db = $this->initDb();
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:        $this->exec($db, 'DELETE FROM sf_profiler_data WHERE created_at < :time', array(':time' => time() - $this->lifetime));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $this->close($db);
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:    protected function exec($db, $query, array $args = array())
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-    {
--
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-        $profile->setTime($data['time']);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:        $profile->setCollectors(unserialize(base64_decode($data['data'])));
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php-
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php:    public function unserialize($data)
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php-    {
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php:        list($environment, $debug) = unserialize($data);
./vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Kernel.php-
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php:        $this->assertEquals($frame->getFileContents(), file_get_contents($data['file']));
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-    }
--
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-        $serializedFrame = serialize($frame);
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php:        $newFrame        = unserialize($serializedFrame);
./vendor/filp/whoops/tests/Whoops/Exception/FrameTest.php-
./vendor/filp/whoops/tests/Whoops/Exception/FrameCollectionTest.php-        $serializedFrames = serialize($frames);
./vendor/filp/whoops/tests/Whoops/Exception/FrameCollectionTest.php:        $newFrames        = unserialize($serializedFrames);
./vendor/filp/whoops/tests/Whoops/Exception/FrameCollectionTest.php-
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php:          <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-          <div class="details">
--
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-          var $this  = $(this);
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php:          var id     = /frame\-line\-([\d]*)/.exec($this.attr('id'))[1];
./vendor/filp/whoops/src/Whoops/Resources/pretty-template.php-          var $codeFrame = $('#frame-code-' + id);
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-            'handlers'     => $this->getRun()->getHandlers(),
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:            'pageStyle'    => file_get_contents($cssFile),
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-
--
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-                'Server/Request Data'   => $_SERVER,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:                'GET Data'              => $_GET,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:                'POST Data'             => $_POST,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php:                'Files'                 => $_FILES,
./vendor/filp/whoops/src/Whoops/Handler/PrettyPageHandler.php-                'Cookies'               => $_COOKIE,
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-    {
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php:        assert('is_array($data) || $node instanceof Traversable');
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-
--
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-    {
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php:        assert('is_array($data) || $node instanceof Traversable');
./vendor/filp/whoops/src/Whoops/Handler/XmlResponseHandler.php-
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:        // Check if this frame occurred within an eval().
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-        // @todo: This can be made more reliable by checking if we've entered
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:        // eval() in a previous trace, but will need some more work on the upper
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-        // trace collector(s).
--
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:            $this->fileContentsCache = file_get_contents($filePath);
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-        }
--
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-     */
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:    public function unserialize($serializedFrame)
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-    {
./vendor/filp/whoops/src/Whoops/Exception/Frame.php:        $frame = unserialize($serializedFrame);
./vendor/filp/whoops/src/Whoops/Exception/Frame.php-
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php-     */
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php:    public function unserialize($serializedFrames)
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php-    {
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php:        $this->frames = unserialize($serializedFrames);
./vendor/filp/whoops/src/Whoops/Exception/FrameCollection.php-    }
./vendor/server.php-
./vendor/server.php:$uri = urldecode($uri);
./vendor/server.php-
./vendor/knplabs/packagist-api/spec/Packagist/Api/Fixture/FixtureLoader.php-    {
./vendor/knplabs/packagist-api/spec/Packagist/Api/Fixture/FixtureLoader.php:        return file_get_contents(__DIR__.'/'.$name);
./vendor/knplabs/packagist-api/spec/Packagist/Api/Fixture/FixtureLoader.php-    }
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-              && !static::loadMap('from.', $c,  $d) ) $d = false;
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php:            else if ('B' === strtoupper($str[$i+1])) $d = base64_decode($str[$i+2]);
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php:            else $d = rawurldecode(strtr(str_replace('%', '%25', $str[$i+2]), '=_', '% '));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-
--
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-        $file = __DIR__ . '/charset/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Iconv.php-        else return false;
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-        {
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php:            $s = base64_decode($s);
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-            $from_encoding = $to_encoding;
--
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-        $file = __DIR__ . '/unidata/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Mbstring.php-        else return false;
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Normalizer.php-        $file = __DIR__ . '/unidata/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Normalizer.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/PHP/Shim/Normalizer.php-        else return false;
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php:        if (! preg_match('//u', urldecode($uri)))
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-        {
--
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-                '/(?:%[89A-F][0-9A-F])+/i',
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php:                function($m) {return urlencode(u::utf8_encode(urldecode($m[0])));},
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-                $uri
--
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php:        $a = array(&$_FILES, &$_ENV, &$_GET, &$_POST, &$_COOKIE, &$_SERVER, &$_REQUEST);
./vendor/patchwork/utf8/class/Patchwork/Utf8/Bootup.php-
./vendor/patchwork/utf8/class/Patchwork/Utf8.php-        $file = __DIR__ . '/Utf8/data/' . $file . '.ser';
./vendor/patchwork/utf8/class/Patchwork/Utf8.php:        if (file_exists($file)) return unserialize(file_get_contents($file));
./vendor/patchwork/utf8/class/Patchwork/Utf8.php-        else return false;
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $serializedClosure = serialize($this->serializableClosure);
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $unserializedClosure = unserialize($serializedClosure);
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $finalReturnValue = call_user_func($unserializedClosure, 4);
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $serializedOnce = unserialize(serialize($this->serializableClosure));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $this->assertEquals(32, call_user_func($serializedOnce, 5));
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $serializedAgain = unserialize(serialize($this->serializableClosure));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $this->assertEquals(32, call_user_func($serializedAgain, 5));
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $serializedTwice = unserialize(serialize($serializedOnce));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        $this->assertEquals(32, call_user_func($serializedTwice, 5));
--
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php:        $newInc = unserialize(serialize($inc));
./vendor/jeremeamia/SuperClosure/tests/Jeremeamia/SuperClosure/Test/SerializableClosureTest.php-        /** @var $newInc \Closure */
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-     */
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php:    public function unserialize($__serialized__)
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-    {
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-        // Unserialize the data we need to reconstruct the SuperClosure
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php:        $this->state = unserialize($__serialized__);
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-        list($__code__, $__context__) = $this->state;
--
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-        // Evaluate the code to recreate the Closure
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php:        eval("\$this->closure = {$__code__};");
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/SerializableClosure.php-    }
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/ClosureParser.php-            $parser = new \PHPParser_Parser(new \PHPParser_Lexer_Emulative);
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/ClosureParser.php:            self::$cache[$filename] = $parser->parse(file_get_contents($filename));
./vendor/jeremeamia/SuperClosure/src/Jeremeamia/SuperClosure/ClosureParser.php-        }
./vendor/jeremeamia/SuperClosure/demo/factorial.php-$serialized = serialize($factorial);
./vendor/jeremeamia/SuperClosure/demo/factorial.php:$unserialized = unserialize($serialized);
./vendor/jeremeamia/SuperClosure/demo/factorial.php-
./vendor/jeremeamia/SuperClosure/demo/hello-world.php-$serialized = serialize($helloWorld);
./vendor/jeremeamia/SuperClosure/demo/hello-world.php:$unserialized = unserialize($serialized);
./vendor/jeremeamia/SuperClosure/demo/hello-world.php-
./vendor/laravel/framework/src/Illuminate/Http/Request.php-	{
./vendor/laravel/framework/src/Illuminate/Http/Request.php:		return rawurldecode($this->path());
./vendor/laravel/framework/src/Illuminate/Http/Request.php-	}
--
./vendor/laravel/framework/src/Illuminate/Http/Request.php-		{
./vendor/laravel/framework/src/Illuminate/Http/Request.php:			if (str_is($pattern, urldecode($this->path())))
./vendor/laravel/framework/src/Illuminate/Http/Request.php-			{
./vendor/laravel/framework/src/Illuminate/Remote/SecLibGateway.php-	{
./vendor/laravel/framework/src/Illuminate/Remote/SecLibGateway.php:		$this->getConnection()->exec($command, false);
./vendor/laravel/framework/src/Illuminate/Remote/SecLibGateway.php-	}
./vendor/laravel/framework/src/Illuminate/Support/SerializableClosure.php-		{
./vendor/laravel/framework/src/Illuminate/Support/SerializableClosure.php:			list($this->code, $this->variables) = unserialize($this->serialize());
./vendor/laravel/framework/src/Illuminate/Support/SerializableClosure.php-		}
./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php-	{
./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:		if ($this->isFile($path)) return file_get_contents($path);
./vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php-
./vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php-	 */
./vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php-	{
./vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php-	 */
./vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php-	{
./vendor/laravel/framework/src/Illuminate/Database/Connection.php-
./vendor/laravel/framework/src/Illuminate/Database/Connection.php:			return (bool) $me->getPdo()->exec($query);
./vendor/laravel/framework/src/Illuminate/Database/Connection.php-		});
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php:		$this->pdo->exec('BEGIN TRAN');
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
--
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php:			$this->pdo->exec('COMMIT TRAN');
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-		}
--
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-		{
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php:			$this->pdo->exec('ROLLBACK TRAN');
./vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php-
./vendor/laravel/framework/src/Illuminate/Session/Store.php-
./vendor/laravel/framework/src/Illuminate/Session/Store.php:		return $data ? unserialize($data) : array();
./vendor/laravel/framework/src/Illuminate/Session/Store.php-	}
./vendor/laravel/framework/src/Illuminate/Config/FileLoader.php-	 */
./vendor/laravel/framework/src/Illuminate/Config/FileLoader.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Config/FileLoader.php-	{
./vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php-
./vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php:		return preg_match($route->getCompiled()->getRegex(), rawurldecode($path));
./vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php-	}
./vendor/laravel/framework/src/Illuminate/Routing/Route.php-			{
./vendor/laravel/framework/src/Illuminate/Routing/Route.php:				return is_string($value) ? urldecode($value) : $value;
./vendor/laravel/framework/src/Illuminate/Routing/Route.php-
./vendor/laravel/framework/src/Illuminate/Mail/Mailer.php-		{
./vendor/laravel/framework/src/Illuminate/Mail/Mailer.php:			return with(unserialize($data['callback']))->getClosure();
./vendor/laravel/framework/src/Illuminate/Mail/Mailer.php-		}
./vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php-	 */
./vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php-	{
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ChangesCommand.php-	{
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ChangesCommand.php:		return json_decode(file_get_contents(__DIR__.'/../changes.json'), true);
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ChangesCommand.php-	}
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php-
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php:		passthru('"'.PHP_BINARY.'"'." -S {$host}:{$port} -t \"{$public}\" server.php");
./vendor/laravel/framework/src/Illuminate/Foundation/Console/ServeCommand.php-	}
./vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php-
./vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php:				eval($input);
./vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php-			}
./vendor/laravel/framework/src/Illuminate/Workbench/Console/WorkbenchMakeCommand.php-
./vendor/laravel/framework/src/Illuminate/Workbench/Console/WorkbenchMakeCommand.php:		passthru('composer install --dev');
./vendor/laravel/framework/src/Illuminate/Workbench/Console/WorkbenchMakeCommand.php-	}
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php:		return unserialize(substr($contents, 10));
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-	}
--
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-	 */
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/Cache/FileStore.php-	{
./vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php-		{
./vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php:			return is_numeric($value) ? $value : unserialize($value);
./vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php-		}
./vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php-	{
./vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php:		$closure = unserialize($data['closure']);
./vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php-
./vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php-	 */
./vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php:	public function getFilesystem()
./vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php-	{
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-		// and decrypt the data, passing back the unserialized from of the value.
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		$value = base64_decode($payload['value']);
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		$iv = base64_decode($payload['iv']);
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		return unserialize($this->stripPadding($this->mcryptDecrypt($value, $iv)));
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-	}
--
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-	{
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php:		$payload = json_decode(base64_decode($payload), true);
./vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php-
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php:          <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-          <div class="details">
--
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-          var $this  = $(this);
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php:          var id     = /frame\-line\-([\d]*)/.exec($this.attr('id'))[1];
./vendor/laravel/framework/src/Illuminate/Exception/resources/pretty-template.php-          var $codeFrame = $('#frame-code-' + id);
./vendor/laravel/framework/src/Illuminate/Exception/PlainDisplayer.php-
./vendor/laravel/framework/src/Illuminate/Exception/PlainDisplayer.php:		return new Response(file_get_contents(__DIR__.'/resources/plain.html'), $status, $headers);
./vendor/laravel/framework/src/Illuminate/Exception/PlainDisplayer.php-	}
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php:    public function pExpr_Eval(PHPParser_Node_Expr_Eval $node) {
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php:        return 'eval(' . $this->p($node->expr) . ')';
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-    }
--
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php:    public function pExpr_ShellExec(PHPParser_Node_Expr_ShellExec $node) {
./vendor/nikic/php-parser/lib/PHPParser/PrettyPrinter/Default.php-        return '`' . $this->pEncapsList($node->parts, '`') . '`';
./vendor/nikic/php-parser/lib/PHPParser/Unserializer.php-     */
./vendor/nikic/php-parser/lib/PHPParser/Unserializer.php:    public function unserialize($string);
./vendor/nikic/php-parser/lib/PHPParser/Unserializer.php-}
./vendor/nikic/php-parser/lib/PHPParser/TemplateLoader.php-
./vendor/nikic/php-parser/lib/PHPParser/TemplateLoader.php:        return new PHPParser_Template($this->parser, file_get_contents($file));
./vendor/nikic/php-parser/lib/PHPParser/TemplateLoader.php-    }
./vendor/nikic/php-parser/lib/PHPParser/Node/Expr/Eval.php-    /**
./vendor/nikic/php-parser/lib/PHPParser/Node/Expr/Eval.php:     * Constructs an eval() node.
./vendor/nikic/php-parser/lib/PHPParser/Node/Expr/Eval.php-     *
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    protected function yyn240($attributes) {
./vendor/nikic/php-parser/lib/PHPParser/Parser.php:         $this->yyval = new PHPParser_Node_Expr_Eval($this->yyastk[$this->stackPos-(2-2)], $attributes); 
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    }
--
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    protected function yyn255($attributes) {
./vendor/nikic/php-parser/lib/PHPParser/Parser.php:         $this->yyval = new PHPParser_Node_Expr_ShellExec($this->yyastk[$this->stackPos-(3-2)], $attributes); 
./vendor/nikic/php-parser/lib/PHPParser/Parser.php-    }
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php:    public function unserialize($string) {
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-        $this->reader->XML($string);
--
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-        // create the node without calling it's constructor
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php:        $node = unserialize(
./vendor/nikic/php-parser/lib/PHPParser/Unserializer/XML.php-            sprintf(
./vendor/nikic/php-parser/test/PHPParser/Tests/Builder/InterfaceTest.php-
./vendor/nikic/php-parser/test/PHPParser/Tests/Builder/InterfaceTest.php:        eval($this->dump($contract));
./vendor/nikic/php-parser/test/PHPParser/Tests/Builder/InterfaceTest.php-
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-            // read file
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php:            $fileContents = file_get_contents($file);
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-
--
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-    protected function evalCallback($matches) {
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php:        return eval('return ' . $matches[1] . ';');
./vendor/nikic/php-parser/test/PHPParser/Tests/CodeTestAbstract.php-    }
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-            )),
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:            $unserializer->unserialize($xml)
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        );
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-            new PHPParser_Node_Scalar_ClassConst,
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:            $unserializer->unserialize($xml)
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        );
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        $unserializer  = new PHPParser_Unserializer_XML;
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:        $this->assertEquals($result, $unserializer->unserialize($xml));
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-    }
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        $unserializer = new PHPParser_Unserializer_XML;
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:        $unserializer->unserialize($xml);
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-    }
--
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-        $unserializer = new PHPParser_Unserializer_XML;
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php:        $unserializer->unserialize($xml);
./vendor/nikic/php-parser/test/PHPParser/Tests/Unserializer/XMLTest.php-    }
./vendor/nikic/php-parser/grammar/rebuildParser.php-
./vendor/nikic/php-parser/grammar/rebuildParser.php:$grammarCode = file_get_contents($grammarFile);
./vendor/nikic/php-parser/grammar/rebuildParser.php-
--
./vendor/nikic/php-parser/grammar/rebuildParser.php-echo "Building parser.\n";
./vendor/nikic/php-parser/grammar/rebuildParser.php:$output = trim(shell_exec("$kmyacc -l -m $skeletonFile -p PHPParser_Parser $tmpGrammarFile 2>&1"));
./vendor/nikic/php-parser/grammar/rebuildParser.php-echo "Output: \"$output\"\n";
--
./vendor/nikic/php-parser/grammar/rebuildParser.php-    echo "Building debug parser.\n";
./vendor/nikic/php-parser/grammar/rebuildParser.php:    $output = trim(shell_exec("$kmyacc -t -v -l -m $skeletonFile -p PHPParser_Parser $tmpGrammarFile 2>&1"));
./vendor/nikic/php-parser/grammar/rebuildParser.php-    echo "Output: \"$output\"\n";
./vendor/nikic/php-parser/grammar/analyze.php-
./vendor/nikic/php-parser/grammar/analyze.php:list($defs, $ruleBlocks) = magicSplit('%%', file_get_contents(GRAMMAR_FILE));
./vendor/nikic/php-parser/grammar/analyze.php-
./vendor/nikic/php-parser/test_old/run.php-    $startTime = microtime(true);
./vendor/nikic/php-parser/test_old/run.php:    $code = file_get_contents($file);
./vendor/nikic/php-parser/test_old/run.php-    $readTime += microtime(true) - $startTime;
./vendor/league/oauth2-server/src/League/OAuth2/Server/Authorization.php-     *
./vendor/league/oauth2-server/src/League/OAuth2/Server/Authorization.php:     * @param  array $inputParams Optional array of parsed $_POST keys
./vendor/league/oauth2-server/src/League/OAuth2/Server/Authorization.php-     * @return array             Authorise request parameters
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     *
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php:     * @param  array $inputParams Optional array of parsed $_GET keys
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     * @throws \OAuth2\Exception\ClientException
--
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     * @param  string $typeId      The session owner's ID
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php:     * @param  array  $authParams  The authorise request $_GET parameters
./vendor/league/oauth2-server/src/League/OAuth2/Server/Grant/AuthCode.php-     * @return string              An authorisation code
./vendor/league/oauth2-server/src/League/OAuth2/Server/Util/Request.php-    {
./vendor/league/oauth2-server/src/League/OAuth2/Server/Util/Request.php:        return new static($_GET, $_POST, $_COOKIE, $_FILES, $_SERVER);
./vendor/league/oauth2-server/src/League/OAuth2/Server/Util/Request.php-    }
./vendor/d11wtq/boris/lib/Boris/Config.php-  private $_cascade = false;
./vendor/d11wtq/boris/lib/Boris/Config.php:  private $_files   = array();
./vendor/d11wtq/boris/lib/Boris/Config.php-
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php:        $__result = eval($__input);
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-
--
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-      if (is_string($__hook)) {
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php:        eval($__hook);
./vendor/d11wtq/boris/lib/Boris/EvalWorker.php-      } elseif (is_callable($__hook)) {
./vendor/d11wtq/boris/lib/Boris/Boris.php-   *
./vendor/d11wtq/boris/lib/Boris/Boris.php:   * The hook is either a string of PHP code to eval(), or a Closure accepting
./vendor/d11wtq/boris/lib/Boris/Boris.php-   * the EvalWorker object as its first argument and the array of defined
--
./vendor/d11wtq/boris/lib/Boris/Boris.php-   *
./vendor/d11wtq/boris/lib/Boris/Boris.php:   * The hook is either a string of PHP code to eval(), or a Closure accepting
./vendor/d11wtq/boris/lib/Boris/Boris.php-   * the EvalWorker object as its first argument and the array of defined
./vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php:     * Will be called, automatically, when unserialize() is called on a Math_BigInteger object.
./vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php:        if (!$this->ssh->exec('scp -t "' . $remote_file . '"', false)) { // -t = to
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-            return false;
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php:        if (!$this->ssh->exec('scp -f "' . $remote_file . '"', false)) { // -f = from
./vendor/phpseclib/phpseclib/phpseclib/Net/SCP.php-            return false;
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php- *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php: *    echo $ssh->exec('ls -la');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php- * ?>
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     * Set by the constructor call. Calling setTimeout() is optional. If it's not called functions like
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php:     * exec() won't timeout unless some PHP setting forces it too. The timeout specified in the constructor,
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     * however, is non-optional. There will be a timeout, whether or not you set it. If you don't it'll be
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php:     * $ssh->exec('ping 127.0.0.1'); on a Linux host will never return and will run indefinitely.  setTimeout() makes it so it'll timeout.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     * Setting $timeout to false or 0 will mean there is no timeout.
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php:    function exec($cmd, $block = true)
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH1.php-    {
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php- *
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php: * Net_SSH2::exec() uses 0 and Net_SSH2::read() / Net_SSH2::write() use 1.
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php- *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php-                       "exec sftp-server";
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php:            // we don't do $this->exec($command, false) because exec() operates on a different channel and plus the SSH_MSG_CHANNEL_OPEN that exec() does
./vendor/phpseclib/phpseclib/phpseclib/Net/SFTP.php-            // is redundant
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php: *    echo $ssh->exec('pwd');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php: *    echo $ssh->exec('ls -la');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- * ?>
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- *    //$key->setPassword('whatever');
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php: *    $key->loadKey(file_get_contents('privatekey'));
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php- *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @see Net_SSH2::_get_channel_packet()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @var Array
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @see Net_SSH2::_get_channel_packet()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @var Array
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @see Net_SSH2::_send_channel_packet()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @access private
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Flag to request a PTY when using exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Flag set while exec() is running when using enablePTY()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Flag set after startSubsystem() is called
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * Set by the constructor call. Calling setTimeout() is optional. If it's not called functions like
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * exec() won't timeout unless some PHP setting forces it too. The timeout specified in the constructor,
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * however, is non-optional. There will be a timeout, whether or not you set it. If you don't it'll be
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * $ssh->exec('ping 127.0.0.1'); on a Linux host will never return and will run indefinitely.  setTimeout() makes it so it'll timeout.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * Setting $timeout to false or 0 will mean there is no timeout.
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:    function exec($command, $callback = null)
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    {
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        // sending a pty-req SSH_MSG_CHANNEL_REQUEST message is unnecessary and, in fact, in most cases, slows things
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        // down.  the one place where it might be desirable is if you're doing something like Net_SSH2::exec('ping localhost &').
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        // with a pty-req SSH_MSG_CHANNEL_REQUEST, exec() will return immediately and the ping process will then
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        // then immediately terminate.  without such a request exec() will loop indefinitely.  the ping process won't end but
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        // neither will your script.
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Right now only one subsystem at a time is supported. To support multiple subsystem's stopSubsystem() could accept
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * a string that contained the name of the subsystem, but at that point, only one subsystem of each type could be opened.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * To support multiple subsystem's of the same name maybe it'd be best if startSubsystem() generated a new channel id and
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * returns that and then that that was passed into stopSubsystem() but that'll be saved for a future date and implemented
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * if there's sufficient demand for such a feature.
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::stopSubsystem()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @param String $subsystem
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:    function startSubsystem($subsystem)
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    {
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * @see Net_SSH2::startSubsystem()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * @return Boolean
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     */
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:    function stopSubsystem()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    {
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Did exec() or read() return because they timed out or because they encountered the end?
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        //if ($this->decompress) {
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:        //    $payload = gzinflate(substr($payload, 2));
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-        //}
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Enable request-pty when using exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-    /**
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Disable request-pty when using exec()
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
--
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     *
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php:     * Net_SSH2 doesn't properly close most channels.  For exec() channels are normally closed by the server
./vendor/phpseclib/phpseclib/phpseclib/Net/SSH2.php-     * and for SFTP channels are presumably closed when the client disconnects.  This functions is intended
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php- *
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php: *    echo $ssh->exec('pwd');
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php: *    echo $ssh->exec('ls -la');
./vendor/phpseclib/phpseclib/phpseclib/System/SSH/Agent.php- * ?>
./vendor/phpseclib/phpseclib/phpseclib/File/ASN1.php-                   -- http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf#page=16 */
./vendor/phpseclib/phpseclib/phpseclib/File/ASN1.php:                $value = base64_decode($source);
./vendor/phpseclib/phpseclib/phpseclib/File/ASN1.php-                break;
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        // assert($TBSCertificate['children']['signature'] == $Certificate['children']['signatureAlgorithm'])
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        $TBSCertificate = array(
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                        $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey']
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                            = base64_encode("\0" . base64_decode(preg_replace('#-.+-|[\r\n]#', '', $cert['tbsCertificate']['subjectPublicKeyInfo']['subjectPublicKey'])));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                $value = &$extensions[$i]['extnValue'];
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                $value = base64_decode($value);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                $decoded = $asn1->decodeBER($value);
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->currentCert['signatureAlgorithm']['algorithm'],
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    substr(base64_decode($this->currentCert['signature']), 1),
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    $this->signatureSubject
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    // uses as a cert authority actually use a non-zero bit I think it's safe to assume that none do.
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                    chunk_split(base64_encode(substr(base64_decode($key), 1)), 64) .
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                    '-----END RSA PUBLIC KEY-----';
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-    {
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        $ip = base64_decode($ip);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        list(, $ip) = unpack('N', $ip);
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                        $csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey']
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                            = base64_encode("\0" . base64_decode(preg_replace('#-.+-|[\r\n]#', '', $csr['certificationRequestInfo']['subjectPKInfo']['subjectPublicKey'])));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        $temp = preg_replace('#(?:SPKAC=)|[ \r\n\\\]#', '', $spkac);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        $temp = preg_match('#^[a-zA-Z\d/+]*={0,2}$#', $temp) ? base64_decode($temp) : false;
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        if ($temp != false) {
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                        $spkac['publicKeyAndChallenge']['spki']['subjectPublicKey']
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                            = base64_encode("\0" . base64_decode(preg_replace('#-.+-|[\r\n]#', '', $spkac['publicKeyAndChallenge']['spki']['subjectPublicKey'])));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                }
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                $raw = base64_decode($raw);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                // If the key is private, compute identifier from its corresponding public key.
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                // the former is a good example of how to do fuzzing on the public key
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:                //return new File_ASN1_Element(base64_decode(preg_replace('#-.+-|[\r\n]#', '', $this->publicKey->getPublicKey())));
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-                return array(
--
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        $temp = str_replace(array("\r", "\n", ' '), '', $temp);
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php:        $temp = preg_match('#^[a-zA-Z\d/+]*={0,2}$#', $temp) ? base64_decode($temp) : false;
./vendor/phpseclib/phpseclib/phpseclib/File/X509.php-        return $temp != false ? $temp : $str;
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php-                serialize($_SERVER) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php:                serialize($_POST) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php:                serialize($_GET) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php-                serialize($_COOKIE) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php:                serialize($GLOBALS) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php-                serialize($_SESSION) .
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        if (!empty($partial)) {
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:            extract(unserialize($partial));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        } else {
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:                $key = isset($parts[1]) ? base64_decode($parts[1]) : false;
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                if ($key === false) {
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                $publicLength = trim(preg_replace('#Public-Lines: (\d+)#', '$1', $key[3]));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:                $public = base64_decode(implode('', array_map('trim', array_slice($key, 4, $publicLength))));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                $public = substr($public, 11);
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-                $privateLength = trim(preg_replace('#Private-Lines: (\d+)#', '$1', $key[$publicLength + 4]));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:                $private = base64_decode(implode('', array_map('trim', array_slice($key, $publicLength + 5, $privateLength))));
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        if (isset($this->current)) {
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:            $this->current = new Math_BigInteger(base64_decode($this->current), 256);
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-            unset($this->current);
--
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        $temp = str_replace(array("\r", "\n", ' '), '', $temp);
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php:        $temp = preg_match('#^[a-zA-Z\d/+]*={0,2}$#', $temp) ? base64_decode($temp) : false;
./vendor/phpseclib/phpseclib/phpseclib/Crypt/RSA.php-        return $temp != false ? $temp : $str;
./vendor/phpseclib/phpseclib/tests/Math/BigInteger/TestCase.php-        $x = $this->getInstance('18446744073709551616');
./vendor/phpseclib/phpseclib/tests/Math/BigInteger/TestCase.php:        $y = unserialize(serialize($x));
./vendor/phpseclib/phpseclib/tests/Math/BigInteger/TestCase.php-
./vendor/phpseclib/phpseclib/tests/Functional/Net/SSH2Test.php-            ->will($this->returnValue(true));
./vendor/phpseclib/phpseclib/tests/Functional/Net/SSH2Test.php:        $ssh->exec('pwd', array($callbackObject, 'callbackMethod'));
./vendor/phpseclib/phpseclib/tests/Functional/Net/SSH2Test.php-    }
./vendor/phpseclib/phpseclib/tests/Unit/Math/BigInteger/TestCase.php-        $x = $this->getInstance('18446744073709551616');
./vendor/phpseclib/phpseclib/tests/Unit/Math/BigInteger/TestCase.php:        $y = unserialize(serialize($x));
./vendor/phpseclib/phpseclib/tests/Unit/Math/BigInteger/TestCase.php-
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $asn1 = new File_ASN1();
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php:        $decoded = $asn1->decodeBER(base64_decode($str));
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $result = $asn1->asn1map($decoded[0], $AS_REP);
--
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $asn1 = new File_ASN1();
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php:        $decoded = $asn1->decodeBER(base64_decode($str));
./vendor/phpseclib/phpseclib/tests/Unit/File/ASN1/DevTest.php-        $result = $asn1->asn1map($decoded[0], $AS_REP);
./vendor/phpseclib/phpseclib/tests/Unit/Crypt/RSA/LoadKeyTest.php-               '37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=';
./vendor/phpseclib/phpseclib/tests/Unit/Crypt/RSA/LoadKeyTest.php:        $key = base64_decode($key);
./vendor/phpseclib/phpseclib/tests/Unit/Crypt/RSA/LoadKeyTest.php-
./vendor/phpseclib/phpseclib/tests/Crypt/RSA/LoadKeyTest.php-               '37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=';
./vendor/phpseclib/phpseclib/tests/Crypt/RSA/LoadKeyTest.php:        $key = base64_decode($key);
./vendor/phpseclib/phpseclib/tests/Crypt/RSA/LoadKeyTest.php-
./vendor/rtablada/package-installer/tests/Rtablada/PackageInstaller/PackageSearchCommandTest.php-		$factory = new Factory;
./vendor/rtablada/package-installer/tests/Rtablada/PackageInstaller/PackageSearchCommandTest.php:		$this->results = json_decode(file_get_contents(__DIR__.'/stubs/results.json'), true);
./vendor/rtablada/package-installer/tests/Rtablada/PackageInstaller/PackageSearchCommandTest.php-		$this->results = $factory->create($this->results);
./vendor/rtablada/package-installer/src/Rtablada/PackageInstaller/PackageRequireCommand.php-	{
./vendor/rtablada/package-installer/src/Rtablada/PackageInstaller/PackageRequireCommand.php:		passthru('composer require ' . $this->argument('packageName'));
./vendor/rtablada/package-installer/src/Rtablada/PackageInstaller/PackageRequireCommand.php-	}
./vendor/predis/predis/lib/Predis/Connection/WebdisConnection.php-
./vendor/predis/predis/lib/Predis/Connection/WebdisConnection.php:        if (curl_exec($resource) === false) {
./vendor/predis/predis/lib/Predis/Connection/WebdisConnection.php-            $error = curl_error($resource);
./vendor/predis/predis/lib/Predis/Client.php-     * @deprecated You should start using the new Client::transaction() method
./vendor/predis/predis/lib/Predis/Client.php:     *             as it will replace Client::multiExec() in the next major
./vendor/predis/predis/lib/Predis/Client.php-     *             version of the library.
--
./vendor/predis/predis/lib/Predis/Client.php-     */
./vendor/predis/predis/lib/Predis/Client.php:    public function multiExec(/* arguments */)
./vendor/predis/predis/lib/Predis/Client.php-    {
--
./vendor/predis/predis/lib/Predis/Client.php-     */
./vendor/predis/predis/lib/Predis/Client.php:    protected function initMultiExec(Array $options = null, $callable = null)
./vendor/predis/predis/lib/Predis/Client.php-    {
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-     */
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php:    public function exec()
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-    {
--
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php:            $reply = $this->client->exec();
./vendor/predis/predis/lib/Predis/Transaction/MultiExecContext.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php:        if ($match = eval("return $comparation $operator 0;")) {
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-            call_user_func($callback, $this, $version);
--
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php:        if ($match = eval("return $comparation $operator 0;")) {
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-            call_user_func($callback, $this, $version);
--
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php:        if (!$match = eval("return $comparation $expOperator 0;")) {
./vendor/predis/predis/tests/PHPUnit/PredisTestCase.php-            $this->markTestSkipped(
./vendor/predis/predis/tests/Predis/Connection/MasterSlaveReplicationTest.php-
./vendor/predis/predis/tests/Predis/Connection/MasterSlaveReplicationTest.php:        $unserialized = unserialize(serialize($replication));
./vendor/predis/predis/tests/Predis/Connection/MasterSlaveReplicationTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/PhpiredisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/ConnectionParametersTest.php-        $parameters = new ConnectionParameters(array('port' => 7000, 'custom' => 'foobar'));
./vendor/predis/predis/tests/Predis/Connection/ConnectionParametersTest.php:        $unserialized = unserialize(serialize($parameters));
./vendor/predis/predis/tests/Predis/Connection/ConnectionParametersTest.php-
./vendor/predis/predis/tests/Predis/Connection/PredisClusterTest.php-        $cluster->getConnectionByKey('foo');
./vendor/predis/predis/tests/Predis/Connection/PredisClusterTest.php:        $unserialized = unserialize(serialize($cluster));
./vendor/predis/predis/tests/Predis/Connection/PredisClusterTest.php-
./vendor/predis/predis/tests/Predis/Connection/ComposableStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/ComposableStreamConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/ComposableStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/StreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/StreamConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/StreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/PhpiredisStreamConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/PhpiredisStreamConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/RedisClusterTest.php-
./vendor/predis/predis/tests/Predis/Connection/RedisClusterTest.php:        $unserialized = unserialize(serialize($cluster));
./vendor/predis/predis/tests/Predis/Connection/RedisClusterTest.php-
./vendor/predis/predis/tests/Predis/Connection/WebdisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Connection/WebdisConnectionTest.php:        $unserialized = unserialize(serialize($connection));
./vendor/predis/predis/tests/Predis/Connection/WebdisConnectionTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php:        $this->assertSame($result, $redis->eval($lua, 2, 'foo', 'hoge', 'bar', 'piyo'));
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php:        $redis->eval($lua, 3, 'foo', 'hoge');
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php:        $redis->eval('invalid', 0);
./vendor/predis/predis/tests/Predis/Command/ServerEvalTest.php-    }
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertTrue($redis2->set('foo', 'hijacked'));
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php:        $this->assertNull($redis1->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertSame('hijacked', $redis1->get('foo'));
--
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertTrue($redis2->set('foo', 'hijacked'));
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php:        $this->assertNull($redis1->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionWatchTest.php-        $this->assertSame('hijacked', $redis1->get('foo'));
./vendor/predis/predis/tests/Predis/Command/ServerScriptTest.php-
./vendor/predis/predis/tests/Predis/Command/ServerScriptTest.php:        $redis->eval($lua = 'return true', 0);
./vendor/predis/predis/tests/Predis/Command/ServerScriptTest.php-        $sha1 = sha1($lua);
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $this->assertSame(array('tx1', 'tx2'), $redis->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $this->assertSame(array(), $redis->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $this->assertSame(array('PONG', true, 1), $redis->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
--
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php:        $redis->exec();
./vendor/predis/predis/tests/Predis/Command/TransactionExecTest.php-    }
./vendor/predis/predis/tests/Predis/Command/TransactionUnwatchTest.php-
./vendor/predis/predis/tests/Predis/Command/TransactionUnwatchTest.php:        $this->assertSame(array('hijacked'), $redis1->exec());
./vendor/predis/predis/tests/Predis/Command/TransactionUnwatchTest.php-    }
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php:        $this->assertSame($result, $redis->eval($lua, 2, 'foo', 'hoge', 'bar', 'piyo'));
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-        $this->assertSame($result, $redis->evalsha($sha1, 2, 'foo', 'hoge', 'bar', 'piyo'));
--
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php:        $redis->eval($lua, 2, 'foo', 'hoge', 'bar', 'piyo');
./vendor/predis/predis/tests/Predis/Command/ServerEvalSHATest.php-        $redis->evalsha($sha1, 3, 'foo', 'hoge');
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        $replies = $tx->execute(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $tx->exec();
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        });
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-     */
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:    public function testCheckAndSetWithoutExec()
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-    {
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $tx->multi()->set('foo', 'bar')->echo('simulated failure')->exec();
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        } catch (\Exception $exception) {
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $tx->multi()->set('foo', 'bar')->echo('simulated failure')->exec();
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        } catch (\Exception $exception) {
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $client->multiExec(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-                $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $client->multiExec(function ($tx) use ($value) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-                $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec(function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $tx->set('foo', 'bar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        try {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:            $client1->multiExec(array('watch' => 'sentinel'), function ($tx) use ($client2) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-                $tx->set('sentinel', 'client1');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec($options, function ($tx) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $tx->watch('foobar');
--
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-        $options = array('watch' => 'foo', 'cas' => true, 'retry' => 1);
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php:        $replies = $client->multiExec($options, function ($tx) use ($client2, &$hijack) {
./vendor/predis/predis/tests/Predis/Transaction/MultiExecContextTest.php-            $foo = $tx->get('foo');
./vendor/predis/predis/tests/Predis/ClientTest.php-
./vendor/predis/predis/tests/Predis/ClientTest.php:        $this->assertInstanceOf('Predis\Transaction\MultiExecContext', $client->multiExec());
./vendor/predis/predis/tests/Predis/ClientTest.php-    }
--
./vendor/predis/predis/tests/Predis/ClientTest.php-     */
./vendor/predis/predis/tests/Predis/ClientTest.php:    public function testMethodTransactionIsAliasForMethodMultiExec()
./vendor/predis/predis/tests/Predis/ClientTest.php-    {
--
./vendor/predis/predis/tests/Predis/ClientTest.php-
./vendor/predis/predis/tests/Predis/ClientTest.php:        $this->assertInstanceOf('Predis\Transaction\MultiExecContext', $tx = $client->multiExec($options));
./vendor/predis/predis/tests/Predis/ClientTest.php-
--
./vendor/predis/predis/tests/Predis/ClientTest.php-     */
./vendor/predis/predis/tests/Predis/ClientTest.php:    public function testMultiExecWithArrayAndCallableExecutesMultiExec()
./vendor/predis/predis/tests/Predis/ClientTest.php-    {
--
./vendor/predis/predis/tests/Predis/ClientTest.php-        $client = new Client($connection);
./vendor/predis/predis/tests/Predis/ClientTest.php:        $client->multiExec($options, $callable);
./vendor/predis/predis/tests/Predis/ClientTest.php-    }
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php-    // get current mime types files
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php:    $mime_types = @file_get_contents(APACHE_MIME_TYPES_URL);
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php:    $mime_xml   = @file_get_contents(FREEDESKTOP_XML_URL);
./vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php-
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php-    {
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php:        if (($content = file_get_contents($this->getPath())) === false) {
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php-            throw new Swift_IoException('Failed to get temporary file content.');
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php-            // AUTH NTLM xxxx
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php:            $response = base64_decode(substr(trim($this->sendMessage1($agent)), 4));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php-
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php-            $challenge = $agent->executeCommand("AUTH CRAM-MD5\r\n", array(334));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php:            $challenge = base64_decode(substr($challenge, 4));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php-            $message = base64_encode(
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php-            if (rename($file, $file.'.sending')) {
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php:                $message = unserialize(file_get_contents($file.'.sending'));
./vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php-        $file->flushBuffers();
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php:        $this->assertEquals("foo\nbar\nzip\ntest\n", file_get_contents($this->_testFile));
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php-    }
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-                    $this->assertEquals(
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php:                        base64_decode($encoded), $text,
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php-                        '%s: Encoded string should decode back to original string for sample ' .
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-                    $encodedText = $this->_encoder->encodeString($text);
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-                    $encodedText = $encoder->encodeString($text);
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-                    $this->assertEquals(
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php:                        urldecode(implode('', explode("\r\n", $encodedText))), $text,
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php-                        '%s: Encoded string should decode back to original string for sample ' .
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php-                    $encodedText = $encoder->encodeString($text);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php:                    $text = file_get_contents($sampleDir . '/' . $sampleFile);
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-                    $encodedText = $this->_encoder->encodeString($text);
--
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-                    $this->assertEquals(
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php:                        base64_decode($encodedText), $text,
./vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php-                        '%s: Encoded string should decode back to original string for sample ' .
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        /* @var $signer Swift_Signers_HeaderSigner */
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setSignatureTimestamp('1299879181');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
--
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $messageContent = "Hello World";
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php:        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))) . '/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
./vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php-        $signer->setHashAlgorithm('rsa-sha256');
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php-            "\r\n" .
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php:            preg_quote(base64_encode(file_get_contents($this->_attFile)), '~') .
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php-            "\r\n\r\n" .
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:            $emailSource = file_get_contents($this->_outputFile);
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-            $this->assertAttachmentFromSourceMatches(
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:                file_get_contents($this->_attachmentFile),
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-                $emailSource
--
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-            $this->assertAttachmentFromSourceMatches(
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:                file_get_contents($this->_attachmentFile),
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-                $emailSource
--
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php:        $this->assertIdenticalBinary($attachmentData, base64_decode($attachmentBase64));
./vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php-    }
./vendor/swiftmailer/swiftmailer/create_pear_package.php-
./vendor/swiftmailer/swiftmailer/create_pear_package.php:$template = file_get_contents(dirname(__FILE__).'/package.xml.tpl');
./vendor/swiftmailer/swiftmailer/create_pear_package.php-$content = preg_replace_callback('/\{\{\s*([a-zA-Z0-9_]+)\s*\}\}/', 'replace_parameters', $template);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-{
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:    $GLOBALS['error_log'][] = func_get_args();
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-}
--
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-    {
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $GLOBALS['error_log'] = array();
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-    }
--
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame("test.ERROR: Foo\nBar\r\n\r\nBaz [] []", $GLOBALS['error_log'][0][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][0][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
--
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertStringMatchesFormat('[%s] test.ERROR: Foo', $GLOBALS['error_log'][1][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][1][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertStringMatchesFormat('Bar', $GLOBALS['error_log'][2][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][2][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertStringMatchesFormat('Baz [] []', $GLOBALS['error_log'][3][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:        $this->assertSame($GLOBALS['error_log'][3][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php-    }
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-        $this->assertTrue(file_exists($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:        $this->assertEquals('test', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-    }
--
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-        $this->assertEquals($createFile, file_exists($old4));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:        $this->assertEquals('test', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-    }
--
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:        $this->assertEquals('footest', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php-    }
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php-
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:        if (false === @file_get_contents($url, null, $context)) {
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php-            throw new \RuntimeException(sprintf('Could not connect to %s', $url));
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php-
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:        curl_exec($ch);
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php-        curl_close($ch);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php-
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:        return curl_exec($this->httpConnection);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php-    }
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-        } else {
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php:            $content = file_get_contents($file);
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-        }
--
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-        $this->output->writeln('> Loading configuration file');
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php:        $filesystem = new Filesystem();
./vendor/classpreloader/classpreloader/src/ClassPreloader/Command/PreCompileCommand.php-
2015-08-12_09:24:38 end
